{"total":23,"pageSize":10,"pageCount":3,"data":[{"title":"react事件系统","slug":"react事件系统","date":"2019-02-27T16:00:00.000Z","updated":"2019-03-01T03:57:27.684Z","comments":true,"path":"api/articles/react事件系统.json","excerpt":"","keywords":null,"cover":"https://ws1.sinaimg.cn/large/006tKfTcly1g0mfic97rnj315i0ck43w.jpg","content":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><hr>\n<ul>\n<li>react16.8.3</li>\n<li>react 事件系统分为<code>事件注册</code>和<code>事件分发</code>两个阶段。</li>\n<li>事件注册阶段将<strong>大部分</strong>事件绑定到 document，在事件分发阶段调用 <code>dispatchEvent</code>进行事件捕获、事件冒泡分发。</li>\n<li>事件分发阶段会先根据事件类型调用对应 EventPlugin 进行事件合成，捕获和冒泡阶段会执行的 listener 都会存储到 event._dispatchListeners</li>\n</ul>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两变量数组合并</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accumulate</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  current: ?(T | Array&lt;T&gt;</span>),</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">next</span>: <span class=\"title\">T</span> | <span class=\"title\">Array</span>&lt;<span class=\"title\">T</span>&gt;,</span></span><br><span class=\"line\"><span class=\"function\">): <span class=\"title\">T</span> | <span class=\"title\">Array</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Both are not empty. Warning: Never call x.concat(y) when you are not</span></span><br><span class=\"line\">  <span class=\"comment\">// certain that x is an Array (x could be a string with concat method).</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(current)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current.concat(next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(next)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [current].concat(next);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [current, next];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数组里面的每个元素作为 cb 的参数,执行 cb</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEachAccumulated</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  arr: ?(Array&lt;T&gt; | T</span>),</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">cb</span>: (<span class=\"params\">elem: T</span>) =&gt; <span class=\"title\">void</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">scope</span>: ?<span class=\"title\">any</span>,</span></span><br><span class=\"line\"><span class=\"function\">) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(arr)) &#123;</span><br><span class=\"line\">    arr.forEach(cb, scope);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr) &#123;</span><br><span class=\"line\">    cb.call(scope, arr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件注册\"><a href=\"#事件注册\" class=\"headerlink\" title=\"事件注册\"></a>事件注册</h2><p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1g0mfic97rnj315i0ck43w.jpg\" alt=\"事件注册流程\"></p>\n<p>根据上图步骤我们逐步分析一下具体细节。</p>\n<h3 id=\"在-document-上绑定事件\"><a href=\"#在-document-上绑定事件\" class=\"headerlink\" title=\"在 document 上绑定事件\"></a>在 document 上绑定事件</h3><p>document 上同一类型的事件只会绑定一次。举个🌰：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Control</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;() =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'button1'</span>)&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">            &lt;button onClick=&#123;() =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'button2'</span>)&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里我们在两个 button 分别绑定了一次 <code>click</code> 事件, 但是在 document 上只会绑定一次。继续拿 <code>click</code> 事件举例，让我们一起来看下源码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... 以上省略大量其他事件的条件绑定。dependency 为 react 定义的事件名，与原事件存在一个映射</span></span><br><span class=\"line\"><span class=\"comment\">// 比如 topClick 对应的是 click 事件相关东西，后面事件合成再细说</span></span><br><span class=\"line\"><span class=\"comment\">// mountAt 即 document</span></span><br><span class=\"line\">trapBubbledEvent(dependency, mountAt);</span><br><span class=\"line\"><span class=\"comment\">// 将该标记为已绑定，后续不会重复绑定</span></span><br><span class=\"line\">isListening[dependency] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactDOMEventListener.js 里面的绑定冒泡事件函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trapBubbledEvent</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  topLevelType: DOMTopLevelEventType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  element: Document | Element,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatch = isInteractiveTopLevelEventType(topLevelType)</span><br><span class=\"line\">    ? dispatchInteractiveEvent</span><br><span class=\"line\">    : dispatchEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">  addEventBubbleListener(</span><br><span class=\"line\">    element,</span><br><span class=\"line\">    getRawEventName(topLevelType), <span class=\"comment\">// 获取 native 事件名</span></span><br><span class=\"line\">    <span class=\"comment\">// Check if interactive and wrap in interactiveUpdates</span></span><br><span class=\"line\">    dispatch.bind(<span class=\"literal\">null</span>, topLevelType),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventListener.js 有两个函数进行事件捕获和事件冒泡的事件绑定</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventBubbleListener</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  element: Document | Element,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  eventType: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  listener: Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  element.addEventListener(eventType, listener, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEventCaptureListener</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  element: Document | Element,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  eventType: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  listener: Function,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  element.addEventListener(eventType, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的代码可以看出在 document 上绑定的其实都是<code>dispatch</code>事件。事件执行的时候就是通过这个函数进行事件分发。</p>\n<h3 id=\"在-target-dom-上绑定-noop-函数\"><a href=\"#在-target-dom-上绑定-noop-函数\" class=\"headerlink\" title=\"在 target dom 上绑定 noop 函数\"></a>在 target dom 上绑定 noop 函数</h3><p>react 会在目标 dom 上也绑定一个事件，事件对应的监听函数为一个空函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noop</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是为了将 target dom 上的 native event 冒泡到 document，在由 document 进行处理。</p>\n<h3 id=\"为什么不是所有事件都绑定到-document\"><a href=\"#为什么不是所有事件都绑定到-document\" class=\"headerlink\" title=\"为什么不是所有事件都绑定到 document\"></a>为什么不是所有事件都绑定到 document</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react 中有这么段代码</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenTo</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  registrationName: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  mountAt: Document | Element,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isListening = getListeningForDocument(mountAt);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dependencies = registrationNameDependencies[registrationName];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dependencies.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dependency = dependencies[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(isListening.hasOwnProperty(dependency) &amp;&amp; isListening[dependency])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (dependency) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_SCROLL:</span><br><span class=\"line\">          trapCapturedEvent(TOP_SCROLL, mountAt);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_FOCUS:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_BLUR:</span><br><span class=\"line\">          trapCapturedEvent(TOP_FOCUS, mountAt);</span><br><span class=\"line\">          trapCapturedEvent(TOP_BLUR, mountAt);</span><br><span class=\"line\">          <span class=\"comment\">// We set the flag for a single dependency later in this function,</span></span><br><span class=\"line\">          <span class=\"comment\">// but this ensures we mark both as attached rather than just one.</span></span><br><span class=\"line\">          isListening[TOP_BLUR] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          isListening[TOP_FOCUS] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_CANCEL:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_CLOSE:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (isEventSupported(getRawEventName(dependency))) &#123;</span><br><span class=\"line\">            trapCapturedEvent(dependency, mountAt);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_INVALID:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_SUBMIT:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TOP_RESET:</span><br><span class=\"line\">           <span class=\"comment\">// 这里是重点！！！！</span></span><br><span class=\"line\">           <span class=\"comment\">// 这些事件会直接绑定到对应的 dom 结构上</span></span><br><span class=\"line\">          <span class=\"comment\">// We listen to them on the target DOM elements.</span></span><br><span class=\"line\">          <span class=\"comment\">// Some of them bubble so we don't want them to fire twice.</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          <span class=\"comment\">// By default, listen on the top level to all non-media events.</span></span><br><span class=\"line\">          <span class=\"comment\">// Media events don't bubble so adding the listener wouldn't do anything.</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> isMediaEvent = mediaEventTypes.indexOf(dependency) !== <span class=\"number\">-1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isMediaEvent) &#123;</span><br><span class=\"line\">            trapBubbledEvent(dependency, mountAt);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      isListening[dependency] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件分发\"><a href=\"#事件分发\" class=\"headerlink\" title=\"事件分发\"></a>事件分发</h2><p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcly1g0n46vst53j317m0hwjyo.jpg\" alt=\"事件分发\"></p>\n<p>可能现在已经有很多同学发起疑问了，之前绑定到 component 的 listener 哪去了呢？什么时候被执行呢？<br>稳住，你将会看到了。</p>\n<h3 id=\"查找触发事件的-component\"><a href=\"#查找触发事件的-component\" class=\"headerlink\" title=\"查找触发事件的 component\"></a>查找触发事件的 component</h3><p>前面我们讲过，我们绑定的在 document 上的 listener 其实都是 dispatch 这个分发函数。具体实现如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ReactDOMEventListener.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEvent</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  topLevelType: DOMTopLevelEventType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  nativeEvent: AnyNativeEvent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// .....</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取触发事件的 target</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nativeEventTarget = getEventTarget(nativeEvent);</span><br><span class=\"line\">  <span class=\"comment\">// 根据 target event 对象查找对应的虚拟 dom 节点，component</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetInst = getClosestInstanceFromNode(nativeEventTarget);</span><br><span class=\"line\">  <span class=\"comment\">//.... </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// bookKeeping 的对象缓存</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     topLevelType,</span></span><br><span class=\"line\"><span class=\"comment\">//     nativeEvent,</span></span><br><span class=\"line\"><span class=\"comment\">//     targetInst,</span></span><br><span class=\"line\"><span class=\"comment\">//     ancestors: []</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bookKeeping = getTopLevelCallbackBookKeeping(</span><br><span class=\"line\">    topLevelType,</span><br><span class=\"line\">    nativeEvent,</span><br><span class=\"line\">    targetInst,</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Event queue being processed in the same cycle allows</span></span><br><span class=\"line\">    <span class=\"comment\">// `preventDefault`.</span></span><br><span class=\"line\">    <span class=\"comment\">// \b控制函数执行前后的一个状态恢复</span></span><br><span class=\"line\">    <span class=\"comment\">// 实质是用于执行 handleTopLevel</span></span><br><span class=\"line\">    batchedUpdates(handleTopLevel, bookKeeping);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    releaseTopLevelCallbackBookKeeping(bookKeeping);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleTopLevel</span>(<span class=\"params\">bookKeeping</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetInst = bookKeeping.targetInst;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Loop through the hierarchy, in case there's any nested components.</span></span><br><span class=\"line\">  <span class=\"comment\">// It's important that we build the array of ancestors before calling any</span></span><br><span class=\"line\">  <span class=\"comment\">// event handlers, because event handlers can modify the DOM, leading to</span></span><br><span class=\"line\">  <span class=\"comment\">// inconsistencies with ReactMount's node cache. See #1105.</span></span><br><span class=\"line\">  <span class=\"comment\">// 查找祖先 root 的 container，通常为 null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> ancestor = targetInst;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ancestor) &#123;</span><br><span class=\"line\">      bookKeeping.ancestors.push(ancestor);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = findRootContainerNode(ancestor);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bookKeeping.ancestors.push(ancestor);</span><br><span class=\"line\">    ancestor = getClosestInstanceFromNode(root);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (ancestor);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; bookKeeping.ancestors.length; i++) &#123;</span><br><span class=\"line\">    targetInst = bookKeeping.ancestors[i];</span><br><span class=\"line\">    runExtractedEventsInBatch(</span><br><span class=\"line\">      bookKeeping.topLevelType,</span><br><span class=\"line\">      targetInst,</span><br><span class=\"line\">      bookKeeping.nativeEvent,</span><br><span class=\"line\">      getEventTarget(bookKeeping.nativeEvent),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的 <code>runExtractedEventsInBatch</code> 函数，就是我们即将要分析生成合成事件的过程。</p>\n<h3 id=\"生成合成事件\"><a href=\"#生成合成事件\" class=\"headerlink\" title=\"生成合成事件\"></a>生成合成事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EventPluginHub.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runExtractedEventsInBatch</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  topLevelType: TopLevelType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  targetInst: null | Fiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  nativeEvent: AnyNativeEvent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  nativeEventTarget: EventTarget,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 生成合成事件，为数组类型，可能不止一个</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> events = extractEvents(</span><br><span class=\"line\">    topLevelType,</span><br><span class=\"line\">    targetInst,</span><br><span class=\"line\">    nativeEvent,</span><br><span class=\"line\">    nativeEventTarget,</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// 运行合成事件，这个我们后面再分析</span></span><br><span class=\"line\">  runEventsInBatch(events);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extractEvents</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  topLevelType: TopLevelType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  targetInst: null | Fiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  nativeEvent: AnyNativeEvent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  nativeEventTarget: EventTarget,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Array</span>&lt;<span class=\"title\">ReactSyntheticEvent</span>&gt; | <span class=\"title\">ReactSyntheticEvent</span> | <span class=\"title\">null</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> events = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// EventPluginHub在初始化的时候，注入了七个plugin</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用这些插件分别处理不同的事件</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; plugins.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Not every plugin in the ordering may be loaded at runtime.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> possiblePlugin: PluginModule&lt;AnyNativeEvent&gt; = plugins[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (possiblePlugin) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 重点，每个 plugin 都必须有 extractEvents 方法</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于从对应 plugin 的事件池中取出实例</span></span><br><span class=\"line\">      <span class=\"comment\">// 换句话说就是，通过 extractEvents 生成了单个合成事件</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> extractedEvents = possiblePlugin.extractEvents(</span><br><span class=\"line\">        topLevelType,</span><br><span class=\"line\">        targetInst,</span><br><span class=\"line\">        nativeEvent,</span><br><span class=\"line\">        nativeEventTarget,</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (extractedEvents) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数组合并</span></span><br><span class=\"line\">        events = accumulateInto(events, extractedEvents);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> events;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上述源码我们可以得知，合成事件是事件插件通过 extractEvents 生成的。我们用 SimpleEventPlugin 来举例说明 extractEvents 的工作原理。假设触发事件为 click 事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SimpleEventPlugin.js</span></span><br><span class=\"line\"> extractEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    topLevelType: TopLevelType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    targetInst: null | Fiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    nativeEvent: MouseEvent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    nativeEventTarget: EventTarget,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>): <span class=\"title\">null</span> | <span class=\"title\">ReactSyntheticEvent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dispatchConfig) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> EventConstructor;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (topLevelType) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> DOMTopLevelEventTypes.TOP_KEY_PRESS:</span><br><span class=\"line\">       <span class=\"comment\">// ........ 省略一堆判断</span></span><br><span class=\"line\">      <span class=\"comment\">/* falls through */</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> DOMTopLevelEventTypes.TOP_AUX_CLICK:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> DOMTopLevelEventTypes.TOP_DOUBLE_CLICK:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> DOMTopLevelEventTypes.TOP_MOUSE_DOWN:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> DOMTopLevelEventTypes.TOP_MOUSE_MOVE:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> DOMTopLevelEventTypes.TOP_MOUSE_UP:</span><br><span class=\"line\">        EventConstructor = SyntheticMouseEvent;</span><br><span class=\"line\">      <span class=\"comment\">// .........</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从上述代码可看出，我们取出 click 事件对应的构造函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 然后通过静态方法，从事件池中取出一个事件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> event = EventConstructor.getPooled(</span><br><span class=\"line\">      dispatchConfig,</span><br><span class=\"line\">      targetInst,</span><br><span class=\"line\">      nativeEvent,</span><br><span class=\"line\">      nativeEventTarget,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 事件的初始操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 用来绑定事件捕获和事件冒泡过程中涉及的监听函数</span></span><br><span class=\"line\">    accumulateTwoPhaseDispatches(event);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventPropagators.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accumulateTwoPhaseDispatches</span>(<span class=\"params\">events</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将每个 events 事件在 accumulateTwoPhaseDispatchesSingle 上执行</span></span><br><span class=\"line\">  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accumulateTwoPhaseDispatchesSingle</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event &amp;&amp; event.dispatchConfig.phasedRegistrationNames) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// accumulateDirectionalDispatches 后面我们在解析</span></span><br><span class=\"line\">    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReactTreeTraversal.js</span></span><br><span class=\"line\"><span class=\"comment\">// 查找目标节点父节点</span></span><br><span class=\"line\"><span class=\"comment\">// fn 为上面的 accumulateDirectionalDispatches</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverseTwoPhase</span>(<span class=\"params\">inst, fn, arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (inst) &#123;</span><br><span class=\"line\">    path.push(inst);</span><br><span class=\"line\">    inst = getParent(inst);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i;</span><br><span class=\"line\">  <span class=\"comment\">// 生成捕获流程</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = path.length; i-- &gt; <span class=\"number\">0</span>; ) &#123;</span><br><span class=\"line\">    fn(path[i], <span class=\"string\">'captured'</span>, arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 生成冒泡流程</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">    fn(path[i], <span class=\"string\">'bubbled'</span>, arg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventPropagators.js</span></span><br><span class=\"line\"><span class=\"comment\">// 到这里我们终于看到 _dispatchListeners 了</span></span><br><span class=\"line\"><span class=\"comment\">// _dispatchListener 按捕获和冒泡的顺序存储了对应的 listener</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accumulateDirectionalDispatches</span>(<span class=\"params\">inst, phase, event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 查找 component 上面的 listener</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> listener = listenerAtPhase(inst, event, phase);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (listener) &#123;</span><br><span class=\"line\">    event._dispatchListeners = accumulateInto(</span><br><span class=\"line\">      event._dispatchListeners,</span><br><span class=\"line\">      listener,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 存储实例</span></span><br><span class=\"line\">    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取 dom 的listener</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenerAtPhase</span>(<span class=\"params\">inst, event, propagationPhase: PropagationPhases</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> registrationName =</span><br><span class=\"line\">    event.dispatchConfig.phasedRegistrationNames[propagationPhase];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getListener(inst, registrationName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventPluginHub.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getListener</span>(<span class=\"params\">inst: Fiber, registrationName: string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> listener;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> shouldPreventMouseEvent is DOM-specific and definitely should not</span></span><br><span class=\"line\">  <span class=\"comment\">// live here; needs to be moved to a better place soon</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> stateNode = inst.stateNode;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!stateNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Work in progress (ex: onload events in incremental mode).</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 查找对应 component 的props</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = getFiberCurrentPropsFromNode(stateNode);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!props) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Work in progress.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 从 props 中取出 listener</span></span><br><span class=\"line\">  <span class=\"comment\">// 至此，我们已经初始化完了合成事件</span></span><br><span class=\"line\">  listener = props[registrationName];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldPreventMouseEvent(registrationName, inst.type, props)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> listener;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行合成事件\"><a href=\"#执行合成事件\" class=\"headerlink\" title=\"执行合成事件\"></a>执行合成事件</h3><p>接着我们上文 <code>runEventsInBatch</code> 函数，执行合成事件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EventPluginHub.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runEventsInBatch</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  events: Array&lt;ReactSyntheticEvent&gt; | ReactSyntheticEvent | null,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 和当前事件队列合并</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    eventQueue = accumulateInto(eventQueue, events);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set `eventQueue` to null before processing it so that we can tell if more</span></span><br><span class=\"line\">  <span class=\"comment\">// events get enqueued while processing.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> processingEventQueue = eventQueue;</span><br><span class=\"line\">  eventQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!processingEventQueue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 执行事件队列中的事件</span></span><br><span class=\"line\">  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);</span><br><span class=\"line\">  <span class=\"comment\">// This would be a good time to rethrow if any of the event handlers threw.</span></span><br><span class=\"line\">  rethrowCaughtError();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 忍住，快摸到瓜了</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> executeDispatchesAndReleaseTopLevel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> executeDispatchesAndRelease(e);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> executeDispatchesAndRelease = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event: ReactSyntheticEvent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按顺序执行事件</span></span><br><span class=\"line\">    executeDispatchesInOrder(event);</span><br><span class=\"line\">    <span class=\"comment\">// 执行完后释放事件实例，放回事件对象池</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!event.isPersistent()) &#123;</span><br><span class=\"line\">      event.constructor.release(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// EventPluginUtils.js</span></span><br><span class=\"line\"><span class=\"comment\">// 最后一步了</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeDispatchesInOrder</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 取出之前我们存入 dispatchListeners 的listener 执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatchListeners = event._dispatchListeners;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dispatchInstances = event._dispatchInstances;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    validateEventDispatches(event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(dispatchListeners)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dispatchListeners.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (event.isPropagationStopped()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// Listeners and Instances are two parallel arrays that are always in sync.</span></span><br><span class=\"line\">      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dispatchListeners) &#123;</span><br><span class=\"line\">    executeDispatch(event, dispatchListeners, dispatchInstances);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  event._dispatchListeners = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  event._dispatchInstances = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeDispatch</span>(<span class=\"params\">event, listener, inst</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = event.type || <span class=\"string\">'unknown-event'</span>;</span><br><span class=\"line\">  event.currentTarget = getNodeFromInstance(inst);</span><br><span class=\"line\">  invokeGuardedCallbackAndCatchFirstError(type, listener, <span class=\"literal\">undefined</span>, event);</span><br><span class=\"line\">  event.currentTarget = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// invokeGuardedCallbackImpl.js</span></span><br><span class=\"line\"><span class=\"comment\">// 最终通过这个函数执行我们的 listener</span></span><br><span class=\"line\"><span class=\"comment\">// func 即我们的 listener</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> invokeGuardedCallbackImpl = <span class=\"function\"><span class=\"keyword\">function</span>&lt;<span class=\"title\">A</span>, <span class=\"title\">B</span>, <span class=\"title\">C</span>, <span class=\"title\">D</span>, <span class=\"title\">E</span>, <span class=\"title\">F</span>, <span class=\"title\">Context</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  name: string | null,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  func: (a: A, b: B, c: C, d: D, e: E, f: F</span>) =&gt; <span class=\"title\">mixed</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">context</span>: <span class=\"title\">Context</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">a</span>: <span class=\"title\">A</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">b</span>: <span class=\"title\">B</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">c</span>: <span class=\"title\">C</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">d</span>: <span class=\"title\">D</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">e</span>: <span class=\"title\">E</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">f</span>: <span class=\"title\">F</span>,</span></span><br><span class=\"line\"><span class=\"function\">) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> funcArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    func.apply(context, funcArgs);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onError(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>完毕！</p>\n<h3 id=\"参考美女黄琼大神，建议阅读\"><a href=\"#参考美女黄琼大神，建议阅读\" class=\"headerlink\" title=\"参考美女黄琼大神，建议阅读\"></a>参考美女黄琼大神，建议阅读</h3><p><a href=\"https://segmentfault.com/a/1190000013363525\" target=\"_blank\" rel=\"noopener\">揭秘React形成合成事件的过程</a><br><a href=\"https://segmentfault.com/a/1190000013364457\" target=\"_blank\" rel=\"noopener\">一看就晕的React事件机制</a></p>\n<h3 id=\"感谢阅读\"><a href=\"#感谢阅读\" class=\"headerlink\" title=\"感谢阅读\"></a>感谢阅读</h3>","text":"TL;DRreact16.8.3react 事件系统分为事件注册和事件分发两个阶段。事件注册阶段将大部分事件绑定到 document，在事件分发阶段调用 dispatchEvent进行事件捕获、事件冒泡分发。事件分发阶段会先根据事件类型调用对应 EventPlugin 进行事件合","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":4,"path":"api/categories/react.json"}],"tags":[{"name":"事件系统","slug":"事件系统","count":1,"path":"api/tags/事件系统.json"}]},{"title":"深入理解z-index","slug":"深入理解z-index","date":"2019-02-24T04:20:08.115Z","updated":"2019-02-24T04:20:08.115Z","comments":true,"path":"api/articles/深入理解z-index.json","excerpt":"<p>z-index 简单呀，想显示在上面给个大点的整数不久行了吗❓❓❓</p>\n<p>我们想的还是简单了点，这就好像写了一段能跑的代码，但是不知道它是怎么跑起来的，这就是新手和大佬的差距。要学的还很多，且勿骄勿躁，与君共勉！</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tNc79gy1fo4i47weplj30jg0dcq3i.jpg","content":null,"text":"z-index 简单呀，想显示在上面给个大点的整数不久行了吗❓❓❓我们想的还是简单了点，这就好像写了一段能跑的代码，但是不知道它是怎么跑起来的，这就是新手和大佬的差距。要学的还很多，且勿骄勿躁，与君共勉！ [Figure] 可以看到 opacity 使 z-index 起作用，形","link":"","raw":null,"photos":[],"categories":[{"name":"css","slug":"css","count":2,"path":"api/categories/css.json"}],"tags":[{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"},{"name":"z-index","slug":"z-index","count":1,"path":"api/tags/z-index.json"}]},{"title":"理解apply,call,bind","slug":"理解apply,call,bind","date":"2019-02-24T04:20:08.115Z","updated":"2019-02-24T04:20:08.115Z","comments":true,"path":"api/articles/理解apply,call,bind.json","excerpt":"<p>之前对 js 的 apply、call、bind 方法零零散散有过一些了解，知道它们可以改变函数运行时的 this。今天来深入理解一番。</p>\n<p>其实很多人心想不久是绑定 this 嘛，有什么的。</p>\n<p>好，那么这句代码何解？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function.apply.bind(Math.max, null);</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"之前对 js 的 apply、call、bind 方法零零散散有过一些了解，知道它们可以改变函数运行时的 this。今天来深入理解一番。其实很多人心想不久是绑定 this 嘛，有什么的。好，那么这句代码何解？1<br>Function.apply.bind(Math.max, n","link":"","raw":null,"photos":[],"categories":[{"name":"js","slug":"js","count":1,"path":"api/categories/js.json"}],"tags":[{"name":"apply","slug":"apply","count":1,"path":"api/tags/apply.json"},{"name":"call","slug":"call","count":1,"path":"api/tags/call.json"},{"name":"bind","slug":"bind","count":1,"path":"api/tags/bind.json"}]},{"title":"浏览器加载文件及其解析顺序","slug":"浏览器加载文件及其解析运行顺序","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-25T04:09:07.524Z","comments":true,"path":"api/articles/浏览器加载文件及其解析运行顺序.json","excerpt":"<h3 id=\"浏览器加载文件及其解析顺序\"><a href=\"#浏览器加载文件及其解析顺序\" class=\"headerlink\" title=\"浏览器加载文件及其解析顺序\"></a>浏览器加载文件及其解析顺序</h3><hr>\n<ol>\n<li><p>用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求</p>\n</li>\n<li><p>下载 HTML，并解析执行，逐步构建 DOM 树</p>\n</li>\n<li><p>\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析</p>\n<p>注：如果使用 HTTP/2 推送技术，可以提前进行资源的推送</p>","keywords":null,"cover":null,"content":null,"text":"浏览器加载文件及其解析顺序用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求下载 HTML，并解析执行，逐步构建 DOM 树\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析注：如果使用 HTTP/2 推送技术，可以提前进行资源","link":"","raw":null,"photos":[],"categories":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/categories/文件加载顺序.json"}],"tags":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/tags/文件加载顺序.json"}]},{"title":"webpack之基础配置","slug":"webpack之基础配置","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之基础配置.json","excerpt":"<p>随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1forowys2uwj31kw0sgqcn.jpg","content":null,"text":"随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。 [Figure] 参考链接深入浅出 webpack： http://webpack.w","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"}]},{"title":"webpack之优化","slug":"webpack之优化","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之优化.json","excerpt":"<p>在上篇 <a href=\"https://winixt.github.io/webpack%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">webpack 之基础配置</a>讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tNc79ly1foswn2zlu3j31kw0vr7az.jpg","content":null,"text":"在上篇 webpack 之基础配置讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。 [Figure] 参考链接深入浅出 webpack： http://webpack.wuhaolin.cn/webpack 中文官网： https://","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}]},{"title":"深入理解 http/2","slug":"深入理解 http2","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.115Z","comments":true,"path":"api/articles/深入理解 http2.json","excerpt":"<blockquote>\n<p>以下内容摘自 <a href=\"https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">HTTP/2 简介</a> ，要了解更多请移步 <a href=\"http://shop.oreilly.com/product/0636920028048.do\" target=\"_blank\" rel=\"noopener\">《Web 性能权威指南》</a>（O’Reilly，作者：llya Grigorik）</p>\n</blockquote>\n<p>近来 HTTP/2 的声音不断在国内各个技术论坛响起，说什么 HTTP/2 可以带来多少多少性能提升，到底是如何实现的呢？我们一起来分析一下。</p>","keywords":null,"cover":"https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg?hl=zh-cn","content":null,"text":"以下内容摘自 HTTP/2 简介 ，要了解更多请移步 《Web 性能权威指南》（O’Reilly，作者：llya Grigorik）近来 HTTP/2 的声音不断在国内各个技术论坛响起，说什么 HTTP/2 可以带来多少多少性能提升，到底是如何实现的呢？我们一起来分析一下。HTT","link":"","raw":null,"photos":[],"categories":[{"name":"http/2","slug":"http-2","count":1,"path":"api/categories/http-2.json"}],"tags":[{"name":"http/2","slug":"http-2","count":1,"path":"api/tags/http-2.json"}]},{"title":"js 异步进化史之async","slug":"js异步进化史之async","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/js异步进化史之async.json","excerpt":"<p>我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1fo3j1dq8qjj30ko05fmxw.jpg","content":null,"text":"我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async [Figure] 哇～nice!nice!nice!最后最后的最后连更四篇博客 回调 &gt; promise &gt; generator &gt; async 真的累呀～而且还是写的冰山一角，可以","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"async/await","slug":"async-await","count":1,"path":"api/tags/async-await.json"}]},{"title":"react key","slug":"react key","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/react key.json","excerpt":"<p>react 核心开发人员说之后可能不再需要 key，趁它还在赶紧去了解一泼，逃～～～</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcgy1fo5t530snoj30u40eqtp7.jpg","content":null,"text":"react 核心开发人员说之后可能不再需要 key，趁它还在赶紧去了解一泼，逃～～～ [Figure] 这样 react 会发现 key 为 doxiu、niye 的节点并没有改变，只需移动一下位置，再新增一个 key=”xueyx” 的节点。react 使用 key 识别列表子","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":4,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"key","slug":"key","count":1,"path":"api/tags/key.json"}]},{"title":"react16 系列（1）","slug":"react16 系列（1） ","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/react16 系列（1） .json","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>近来一直忙其他事，没怎么和 react 打过招呼了，转眼 react 已经跟新到了 16.2 版本，并且带来了很多重要的变更:</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcly1fnxip7ozvqj30ui0a8q5d.jpg","content":null,"text":"前言近来一直忙其他事，没怎么和 react 打过招呼了，转眼 react 已经跟新到了 16.2 版本，并且带来了很多重要的变更:render 可以返回字符串（String）和片段（fragments)Error Boundary 处理错误组件Portals 将组件渲染到当前组件","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":4,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"react16","slug":"react16","count":1,"path":"api/tags/react16.json"}]}]}