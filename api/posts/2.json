{"total":24,"pageSize":10,"pageCount":3,"data":[{"title":"react key","slug":"react key","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/react key.json","excerpt":"<p>react 核心开发人员说之后可能不再需要 key，趁它还在赶紧去了解一泼，逃～～～</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcgy1fo5t530snoj30u40eqtp7.jpg","content":null,"text":"react 核心开发人员说之后可能不再需要 key，趁它还在赶紧去了解一泼，逃～～～ [Figure] 这样 react 会发现 key 为 doxiu、niye 的节点并没有改变，只需移动一下位置，再新增一个 key=”xueyx” 的节点。react 使用 key 识别列表子","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":5,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":2,"path":"api/tags/react.json"},{"name":"key","slug":"key","count":1,"path":"api/tags/key.json"}]},{"title":"用一个四元数代替两个3D向量的旋转","slug":"three.js之用一个四元数代替两个3D向量的旋转","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/three.js之用一个四元数代替两个3D向量的旋转.json","excerpt":"<p>翻译自：<a href=\"http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors\" target=\"_blank\" rel=\"noopener\">http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors</a></p>\n<p>一个旋转最好的表示方法就是使用一个旋转轴和一个旋转角。旋转轴可以通过两个向量的叉乘得出。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcly1fnwuc596l5j308c05eglk.jpg","content":null,"text":"翻译自：http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors一个旋转最好的表示方法就是使用一个旋转轴和一个旋转角。旋转轴可以通过两个向量的叉乘得出。 [Figure] 如有不对，欢","link":"","raw":null,"photos":[],"categories":[{"name":"webgl","slug":"webgl","count":1,"path":"api/categories/webgl.json"}],"tags":[{"name":"webgl","slug":"webgl","count":1,"path":"api/tags/webgl.json"},{"name":"3D","slug":"3D","count":1,"path":"api/tags/3D.json"}]},{"title":"js 异步进化史之回调","slug":"js异步进化史之回调","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/js异步进化史之回调.json","excerpt":"<p>人类在代代相传中不断进化，世间万物很多都是如此，已不断适应赖以生存的环境 。物竞天择，有些适应不了新生环境的自然就会逐渐被淘汰。编程语言也一样，大到整个编程语言的版本升级，小到语言内部一些特性的升级。今天我们就来看看 js 语言的异步进化过程。</p>","keywords":null,"cover":"https://ws1.sinaimg.cn/large/006tKfTcgy1fo238oic46j30dw08o763.jpg","content":null,"text":"人类在代代相传中不断进化，世间万物很多都是如此，已不断适应赖以生存的环境 。物竞天择，有些适应不了新生环境的自然就会逐渐被淘汰。编程语言也一样，大到整个编程语言的版本升级，小到语言内部一些特性的升级。今天我们就来看看 js 语言的异步进化过程。 [Figure] 好，现在是解决了","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"回调","slug":"回调","count":1,"path":"api/tags/回调.json"},{"name":"事件循环","slug":"事件循环","count":1,"path":"api/tags/事件循环.json"}]},{"title":"js 异步进化史之Generator","slug":"js异步进化史之Generator","date":"2019-02-24T04:20:08.112Z","updated":"2019-02-24T04:20:08.112Z","comments":true,"path":"api/articles/js异步进化史之Generator.json","excerpt":"<p>在介绍 Generator 和异步的关系之前，我们先分析下 Generator。看看它给我们带来了什么惊奇的表现。<br>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcgy1fo38ppgt76j30s20dsdyc.jpg","content":null,"text":"在介绍 Generator 和异步的关系之前，我们先分析下 Generator。看看它给我们带来了什么惊奇的表现。<br><br> [Figure] 而且还多了 co～很好有极致的编程思维ES 工作组的大佬们也早已洞察到了这一点，于是在 ES7 上添加了更为强大的异步工具asyn","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"Generator","slug":"Generator","count":1,"path":"api/tags/Generator.json"}]},{"title":"js 异步进化史之Promise","slug":"js异步进化史之Promise","date":"2019-02-24T04:20:08.112Z","updated":"2019-02-24T04:20:08.112Z","comments":true,"path":"api/articles/js异步进化史之Promise.json","excerpt":"<p>在上一篇 <a href=\"/js%E5%BC%82%E6%AD%A5%E8%BF%9B%E5%8C%96%E5%8F%B2%E4%B9%8B%E5%9B%9E%E8%B0%83/\">js 异步进化史之回调</a> 我们了解到基于回调处理异步问题存在一些缺陷。那么 Promise 是什么？能够解决回调造成的问题吗？又会不会引入新的问题？下面我们一起来分析一下。</p>","keywords":null,"cover":"https://ws3.sinaimg.cn/large/006tKfTcgy1fo2arjy216j31jk0vzn1j.jpg","content":null,"text":"在上一篇 js 异步进化史之回调 我们了解到基于回调处理异步问题存在一些缺陷。那么 Promise 是什么？能够解决回调造成的问题吗？又会不会引入新的问题？下面我们一起来分析一下。 [Figure] 注：若 Promise.all([…]) 传入空数组，它会立即完成。但 Prom","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"Promise","slug":"Promise","count":1,"path":"api/tags/Promise.json"}]},{"title":"揭开 HTTPS 的神秘面纱","slug":"https","date":"2019-02-24T04:20:08.112Z","updated":"2019-02-25T12:55:35.024Z","comments":true,"path":"api/articles/https.json","excerpt":"<blockquote>\n<p>本文摘自 segmentfault<a href=\"https://segmentfault.com/a/1190000004199917\" target=\"_blank\" rel=\"noopener\">全站 HTTPS 来了</a></p>\n</blockquote>\n<h3 id=\"HTTPS-基础概念\"><a href=\"#HTTPS-基础概念\" class=\"headerlink\" title=\"HTTPS 基础概念\"></a>HTTPS 基础概念</h3><p>大家都了解过 HTTPS （安全超文本协议）是 HTTP 的安全版，为什么说 HTTPS 安全而 HTTP 不安全呢？</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1fnn3plswa6g30eu08emx9.gif","content":null,"text":"本文摘自 segmentfault全站 HTTPS 来了HTTPS 基础概念大家都了解过 HTTPS （安全超文本协议）是 HTTP 的安全版，为什么说 HTTPS 安全而 HTTP 不安全呢？HTTP 存在安全隐患是因为数据都是通过明文传输，如果被中间人攻击会有三方面的风险：信","link":"","raw":null,"photos":[],"categories":[{"name":"https","slug":"https","count":1,"path":"api/categories/https.json"}],"tags":[{"name":"https","slug":"https","count":1,"path":"api/tags/https.json"}]},{"title":"appcache","slug":"appcache","date":"2019-02-24T04:20:08.111Z","updated":"2019-02-24T04:20:08.111Z","comments":true,"path":"api/articles/appcache.json","excerpt":"<p>H5 离线缓存技术，介绍文档这里不在赘述，需要请自行查阅 MDN 文档。<br>更新流程如下，如有错误，欢迎抛砖！</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcly1fte1572i42j310q10qtcg.jpg","content":null,"text":"H5 离线缓存技术，介绍文档这里不在赘述，需要请自行查阅 MDN 文档。<br>更新流程如下，如有错误，欢迎抛砖！ [Figure] 答：首次进入页面，主 html 的缓存不会计入 progress监控关注点白屏时间的改善情况？产品更新上线后，所有访问用户新版本使用情况？第一次访","link":"","raw":null,"photos":[],"categories":[{"name":"离线缓存","slug":"离线缓存","count":1,"path":"api/categories/离线缓存.json"}],"tags":[{"name":"appcache","slug":"appcache","count":1,"path":"api/tags/appcache.json"}]},{"title":"box-sizing","slug":"box-sizing","date":"2019-02-24T04:20:08.111Z","updated":"2019-02-24T04:20:08.111Z","comments":true,"path":"api/articles/box-sizing.json","excerpt":"<p>想必大多数人都用过 box-sizing 属性吧？那么这个属性的值对应的 css 盒子模型宽高计算方式有什么区别呢？</p>","keywords":null,"cover":"https://ws1.sinaimg.cn/large/006tKfTcgy1focoji9wr3j30jg0b4dg8.jpg","content":null,"text":"想必大多数人都用过 box-sizing 属性吧？那么这个属性的值对应的 css 盒子模型宽高计算方式有什么区别呢？ [Figure] 答案是否，因为大部分元素你不需要手动设置宽高，在需要手动设置宽高的元素上再使用是一种更好的选择。当然你要这么使用也没什么问题～","link":"","raw":null,"photos":[],"categories":[{"name":"css","slug":"css","count":2,"path":"api/categories/css.json"}],"tags":[{"name":"box-sizing","slug":"box-sizing","count":1,"path":"api/tags/box-sizing.json"},{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"}]},{"title":"聊一聊 HTTP","slug":"http","date":"2019-02-24T04:20:08.111Z","updated":"2019-02-25T12:15:04.940Z","comments":true,"path":"api/articles/http.json","excerpt":"<blockquote>\n<p>下文中的CORS内容大部分摘自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">HTTP访问控制（CORS）</a>，这里进行了部分更改</p>\n</blockquote>\n<h3 id=\"HTTP-简介\"><a href=\"#HTTP-简介\" class=\"headerlink\" title=\"HTTP 简介\"></a>HTTP 简介</h3><p>HTTP 超文本传输协议(Hypertext Transper Protocol)，应用层协议。基于一种请求/响应的工作模式。即当客户端与服务器连接后，客户端发送请求，服务器给出响应。</p>","keywords":null,"cover":"https://ws3.sinaimg.cn/large/006tKfTcgy1fnpi3nsl4jj30eh0fdgor.jpg","content":null,"text":"下文中的CORS内容大部分摘自 HTTP访问控制（CORS），这里进行了部分更改HTTP 简介HTTP 超文本传输协议(Hypertext Transper Protocol)，应用层协议。基于一种请求/响应的工作模式。即当客户端与服务器连接后，客户端发送请求，服务器给出响应。接","link":"","raw":null,"photos":[],"categories":[{"name":"http","slug":"http","count":1,"path":"api/categories/http.json"}],"tags":[{"name":"http","slug":"http","count":1,"path":"api/tags/http.json"}]},{"title":"CSRF 攻击和防御","slug":"CSRF 攻击和防御","date":"2019-02-24T04:20:08.110Z","updated":"2019-02-25T12:53:32.177Z","comments":true,"path":"api/articles/CSRF 攻击和防御.json","excerpt":"<h3 id=\"CSRF-介绍\"><a href=\"#CSRF-介绍\" class=\"headerlink\" title=\"CSRF 介绍\"></a>CSRF 介绍</h3><p>CSRF（Cross Site Request Forgery，跨站请求伪造），顾名思义就是攻击者盗用（利用）你的身份凭证，进行未经用户许可的恶意操作。与 XSS 不同的是，CSRF 直接利用用户当前的身份凭证，而 XSS 主要是窃取用户的身份凭证。</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcly1fnrs4cfe12j30t80ghjvw.jpg","content":null,"text":"CSRF 介绍CSRF（Cross Site Request Forgery，跨站请求伪造），顾名思义就是攻击者盗用（利用）你的身份凭证，进行未经用户许可的恶意操作。与 XSS 不同的是，CSRF 直接利用用户当前的身份凭证，而 XSS 主要是窃取用户的身份凭证。CSRF 危害C","link":"","raw":null,"photos":[],"categories":[{"name":"web安全","slug":"web安全","count":2,"path":"api/categories/web安全.json"}],"tags":[{"name":"CSRF","slug":"CSRF","count":1,"path":"api/tags/CSRF.json"}]}]}