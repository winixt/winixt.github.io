{"total":29,"pageSize":10,"pageCount":3,"data":[{"title":"webpack之优化","slug":"webpack之优化","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之优化.json","excerpt":"<p>在上篇 <a href=\"https://winixt.github.io/webpack%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">webpack 之基础配置</a>讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tNc79ly1foswn2zlu3j31kw0vr7az.jpg","content":null,"text":"在上篇 webpack 之基础配置讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。 [Figure] 参考链接深入浅出 webpack： http://webpack.wuhaolin.cn/webpack 中文官网： https://","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}]},{"title":"webpack之基础配置","slug":"webpack之基础配置","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之基础配置.json","excerpt":"<p>随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1forowys2uwj31kw0sgqcn.jpg","content":null,"text":"随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。 [Figure] 参考链接深入浅出 webpack： http://webpack.w","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"}]},{"title":"浏览器加载文件及其解析顺序","slug":"浏览器加载文件及其解析运行顺序","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-25T04:09:07.524Z","comments":true,"path":"api/articles/浏览器加载文件及其解析运行顺序.json","excerpt":"<h3 id=\"浏览器加载文件及其解析顺序\"><a href=\"#浏览器加载文件及其解析顺序\" class=\"headerlink\" title=\"浏览器加载文件及其解析顺序\"></a>浏览器加载文件及其解析顺序</h3><hr>\n<ol>\n<li><p>用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求</p>\n</li>\n<li><p>下载 HTML，并解析执行，逐步构建 DOM 树</p>\n</li>\n<li><p>\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析</p>\n<p>注：如果使用 HTTP/2 推送技术，可以提前进行资源的推送</p>","keywords":null,"cover":null,"content":null,"text":"浏览器加载文件及其解析顺序用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求下载 HTML，并解析执行，逐步构建 DOM 树\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析注：如果使用 HTTP/2 推送技术，可以提前进行资源","link":"","raw":null,"photos":[],"categories":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/categories/文件加载顺序.json"}],"tags":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/tags/文件加载顺序.json"}]},{"title":"深入理解 http/2","slug":"深入理解 http2","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.115Z","comments":true,"path":"api/articles/深入理解 http2.json","excerpt":"<blockquote>\n<p>以下内容摘自 <a href=\"https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">HTTP/2 简介</a> ，要了解更多请移步 <a href=\"http://shop.oreilly.com/product/0636920028048.do\" target=\"_blank\" rel=\"noopener\">《Web 性能权威指南》</a>（O’Reilly，作者：llya Grigorik）</p>\n</blockquote>\n<p>近来 HTTP/2 的声音不断在国内各个技术论坛响起，说什么 HTTP/2 可以带来多少多少性能提升，到底是如何实现的呢？我们一起来分析一下。</p>","keywords":null,"cover":"https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg?hl=zh-cn","content":null,"text":"以下内容摘自 HTTP/2 简介 ，要了解更多请移步 《Web 性能权威指南》（O’Reilly，作者：llya Grigorik）近来 HTTP/2 的声音不断在国内各个技术论坛响起，说什么 HTTP/2 可以带来多少多少性能提升，到底是如何实现的呢？我们一起来分析一下。HTT","link":"","raw":null,"photos":[],"categories":[{"name":"http/2","slug":"http-2","count":1,"path":"api/categories/http-2.json"}],"tags":[{"name":"http/2","slug":"http-2","count":1,"path":"api/tags/http-2.json"}]},{"title":"react key","slug":"react key","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/react key.json","excerpt":"<p>react 核心开发人员说之后可能不再需要 key，趁它还在赶紧去了解一泼，逃～～～</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcgy1fo5t530snoj30u40eqtp7.jpg","content":null,"text":"react 核心开发人员说之后可能不再需要 key，趁它还在赶紧去了解一泼，逃～～～ [Figure] 这样 react 会发现 key 为 doxiu、niye 的节点并没有改变，只需移动一下位置，再新增一个 key=”xueyx” 的节点。react 使用 key 识别列表子","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":5,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":2,"path":"api/tags/react.json"},{"name":"key","slug":"key","count":1,"path":"api/tags/key.json"}]},{"title":"js 异步进化史之async","slug":"js异步进化史之async","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/js异步进化史之async.json","excerpt":"<p>我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1fo3j1dq8qjj30ko05fmxw.jpg","content":null,"text":"我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async [Figure] 哇～nice!nice!nice!最后最后的最后连更四篇博客 回调 &gt; promise &gt; generator &gt; async 真的累呀～而且还是写的冰山一角，可以","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"async/await","slug":"async-await","count":1,"path":"api/tags/async-await.json"}]},{"title":"js 异步进化史之回调","slug":"js异步进化史之回调","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/js异步进化史之回调.json","excerpt":"<p>人类在代代相传中不断进化，世间万物很多都是如此，已不断适应赖以生存的环境 。物竞天择，有些适应不了新生环境的自然就会逐渐被淘汰。编程语言也一样，大到整个编程语言的版本升级，小到语言内部一些特性的升级。今天我们就来看看 js 语言的异步进化过程。</p>","keywords":null,"cover":"https://ws1.sinaimg.cn/large/006tKfTcgy1fo238oic46j30dw08o763.jpg","content":null,"text":"人类在代代相传中不断进化，世间万物很多都是如此，已不断适应赖以生存的环境 。物竞天择，有些适应不了新生环境的自然就会逐渐被淘汰。编程语言也一样，大到整个编程语言的版本升级，小到语言内部一些特性的升级。今天我们就来看看 js 语言的异步进化过程。 [Figure] 好，现在是解决了","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"回调","slug":"回调","count":1,"path":"api/tags/回调.json"},{"name":"事件循环","slug":"事件循环","count":1,"path":"api/tags/事件循环.json"}]},{"title":"用一个四元数代替两个3D向量的旋转","slug":"three.js之用一个四元数代替两个3D向量的旋转","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/three.js之用一个四元数代替两个3D向量的旋转.json","excerpt":"<p>翻译自：<a href=\"http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors\" target=\"_blank\" rel=\"noopener\">http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors</a></p>\n<p>一个旋转最好的表示方法就是使用一个旋转轴和一个旋转角。旋转轴可以通过两个向量的叉乘得出。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcly1fnwuc596l5j308c05eglk.jpg","content":null,"text":"翻译自：http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors一个旋转最好的表示方法就是使用一个旋转轴和一个旋转角。旋转轴可以通过两个向量的叉乘得出。 [Figure] 如有不对，欢","link":"","raw":null,"photos":[],"categories":[{"name":"webgl","slug":"webgl","count":1,"path":"api/categories/webgl.json"}],"tags":[{"name":"webgl","slug":"webgl","count":1,"path":"api/tags/webgl.json"},{"name":"3D","slug":"3D","count":1,"path":"api/tags/3D.json"}]},{"title":"揭开 HTTPS 的神秘面纱","slug":"https","date":"2019-02-24T04:20:08.112Z","updated":"2019-02-25T12:55:35.024Z","comments":true,"path":"api/articles/https.json","excerpt":"<blockquote>\n<p>本文摘自 segmentfault<a href=\"https://segmentfault.com/a/1190000004199917\" target=\"_blank\" rel=\"noopener\">全站 HTTPS 来了</a></p>\n</blockquote>\n<h3 id=\"HTTPS-基础概念\"><a href=\"#HTTPS-基础概念\" class=\"headerlink\" title=\"HTTPS 基础概念\"></a>HTTPS 基础概念</h3><p>大家都了解过 HTTPS （安全超文本协议）是 HTTP 的安全版，为什么说 HTTPS 安全而 HTTP 不安全呢？</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1fnn3plswa6g30eu08emx9.gif","content":null,"text":"本文摘自 segmentfault全站 HTTPS 来了HTTPS 基础概念大家都了解过 HTTPS （安全超文本协议）是 HTTP 的安全版，为什么说 HTTPS 安全而 HTTP 不安全呢？HTTP 存在安全隐患是因为数据都是通过明文传输，如果被中间人攻击会有三方面的风险：信","link":"","raw":null,"photos":[],"categories":[{"name":"https","slug":"https","count":1,"path":"api/categories/https.json"}],"tags":[{"name":"https","slug":"https","count":1,"path":"api/tags/https.json"}]},{"title":"js 异步进化史之Promise","slug":"js异步进化史之Promise","date":"2019-02-24T04:20:08.112Z","updated":"2019-02-24T04:20:08.112Z","comments":true,"path":"api/articles/js异步进化史之Promise.json","excerpt":"<p>在上一篇 <a href=\"/js%E5%BC%82%E6%AD%A5%E8%BF%9B%E5%8C%96%E5%8F%B2%E4%B9%8B%E5%9B%9E%E8%B0%83/\">js 异步进化史之回调</a> 我们了解到基于回调处理异步问题存在一些缺陷。那么 Promise 是什么？能够解决回调造成的问题吗？又会不会引入新的问题？下面我们一起来分析一下。</p>","keywords":null,"cover":"https://ws3.sinaimg.cn/large/006tKfTcgy1fo2arjy216j31jk0vzn1j.jpg","content":null,"text":"在上一篇 js 异步进化史之回调 我们了解到基于回调处理异步问题存在一些缺陷。那么 Promise 是什么？能够解决回调造成的问题吗？又会不会引入新的问题？下面我们一起来分析一下。 [Figure] 注：若 Promise.all([…]) 传入空数组，它会立即完成。但 Prom","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"Promise","slug":"Promise","count":1,"path":"api/tags/Promise.json"}]}]}