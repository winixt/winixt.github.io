{"total":24,"pageSize":10,"pageCount":3,"data":[{"title":"理解apply,call,bind","slug":"理解apply,call,bind","date":"2019-03-03T16:00:00.000Z","updated":"2019-03-04T05:37:34.724Z","comments":true,"path":"api/articles/理解apply,call,bind.json","excerpt":"<p>之前对 js 的 apply、call、bind 方法零零散散有过一些了解，知道它们可以改变函数运行时的 this。今天来深入理解一番。</p>\n<p>其实很多人心想不就是绑定 this 嘛，有什么的。</p>\n<p>好，那么这句代码何解？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function.apply.bind(Math.max, null);</span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":"之前对 js 的 apply、call、bind 方法零零散散有过一些了解，知道它们可以改变函数运行时的 this。今天来深入理解一番。其实很多人心想不就是绑定 this 嘛，有什么的。好，那么这句代码何解？1<br>Function.apply.bind(Math.max, n","link":"","raw":null,"photos":[],"categories":[{"name":"js","slug":"js","count":1,"path":"api/categories/js.json"}],"tags":[{"name":"apply","slug":"apply","count":1,"path":"api/tags/apply.json"},{"name":"call","slug":"call","count":1,"path":"api/tags/call.json"},{"name":"bind","slug":"bind","count":1,"path":"api/tags/bind.json"}]},{"title":"react生命周期","slug":"react生命周期","date":"2019-02-28T16:00:00.000Z","updated":"2019-03-01T09:23:25.162Z","comments":true,"path":"api/articles/react生命周期.json","excerpt":"<p>react在 ^16.4 版本进行生命周期的变更，废除了 <code>componentWillMount</code>,<code>componentWillReceiveProps</code>,<code>componentWillUpdate</code>，新引入了两个生命周期函数 <code>getDerivedStateFromProps</code>,<code>getSnapshotBeforeUpdate</code>。</p>","keywords":null,"cover":"https://ws2.sinaimg.cn/large/006tKfTcly1g0n8wrg0v1j30uk0hldi8.jpg","content":null,"text":"react在 ^16.4 版本进行生命周期的变更，废除了 componentWillMount,componentWillReceiveProps,componentWillUpdate，新引入了两个生命周期函数 getDerivedStateFromProps,getSnaps","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":5,"path":"api/categories/react.json"}],"tags":[{"name":"生命周期","slug":"生命周期","count":1,"path":"api/tags/生命周期.json"}]},{"title":"实现一个share state hook","slug":"实现一个share state hook","date":"2019-02-27T16:00:00.000Z","updated":"2019-03-09T07:03:33.050Z","comments":true,"path":"api/articles/实现一个share state hook.json","excerpt":"<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>react hooks 目前主要作用在于通过 useState 等函数实现<strong>状态逻辑</strong>共享，而不是状态状态共享。state 共享依旧需要 redux 等库去实现。redux 对于大型应用确实是一个不错的选择。但是写 action、reducers 难受呀？同意的请往下看，不同意的请摁 ⌘ + w。</p>","keywords":null,"cover":null,"content":null,"text":"现状react hooks 目前主要作用在于通过 useState 等函数实现状态逻辑共享，而不是状态状态共享。state 共享依旧需要 redux 等库去实现。redux 对于大型应用确实是一个不错的选择。但是写 action、reducers 难受呀？同意的请往下看，不同意的","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":5,"path":"api/categories/react.json"}],"tags":[{"name":"hooks","slug":"hooks","count":1,"path":"api/tags/hooks.json"}]},{"title":"react事件系统","slug":"react事件系统","date":"2019-02-27T16:00:00.000Z","updated":"2019-03-01T04:00:35.082Z","comments":true,"path":"api/articles/react事件系统.json","excerpt":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><hr>\n<ul>\n<li>react16.8.3</li>\n<li>react 事件系统分为<code>事件注册</code>和<code>事件分发</code>两个阶段。</li>\n<li>事件注册阶段将<strong>大部分</strong>事件绑定到 document，在事件分发阶段调用 <code>dispatchEvent</code>进行事件捕获、事件冒泡分发。</li>\n<li>事件分发阶段会先根据事件类型调用对应 EventPlugin 进行事件合成，捕获和冒泡阶段会执行的 listener 都会存储到 event._dispatchListeners</li>\n</ul>","keywords":null,"cover":"https://ws1.sinaimg.cn/large/006tKfTcly1g0mfic97rnj315i0ck43w.jpg","content":null,"text":"TL;DRreact16.8.3react 事件系统分为事件注册和事件分发两个阶段。事件注册阶段将大部分事件绑定到 document，在事件分发阶段调用 dispatchEvent进行事件捕获、事件冒泡分发。事件分发阶段会先根据事件类型调用对应 EventPlugin 进行事件合","link":"","raw":null,"photos":[],"categories":[{"name":"react","slug":"react","count":5,"path":"api/categories/react.json"}],"tags":[{"name":"事件系统","slug":"事件系统","count":1,"path":"api/tags/事件系统.json"}]},{"title":"深入理解z-index","slug":"深入理解z-index","date":"2019-02-24T04:20:08.115Z","updated":"2019-02-24T04:20:08.115Z","comments":true,"path":"api/articles/深入理解z-index.json","excerpt":"<p>z-index 简单呀，想显示在上面给个大点的整数不久行了吗❓❓❓</p>\n<p>我们想的还是简单了点，这就好像写了一段能跑的代码，但是不知道它是怎么跑起来的，这就是新手和大佬的差距。要学的还很多，且勿骄勿躁，与君共勉！</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tNc79gy1fo4i47weplj30jg0dcq3i.jpg","content":null,"text":"z-index 简单呀，想显示在上面给个大点的整数不久行了吗❓❓❓我们想的还是简单了点，这就好像写了一段能跑的代码，但是不知道它是怎么跑起来的，这就是新手和大佬的差距。要学的还很多，且勿骄勿躁，与君共勉！ [Figure] 可以看到 opacity 使 z-index 起作用，形","link":"","raw":null,"photos":[],"categories":[{"name":"css","slug":"css","count":2,"path":"api/categories/css.json"}],"tags":[{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"},{"name":"z-index","slug":"z-index","count":1,"path":"api/tags/z-index.json"}]},{"title":"浏览器加载文件及其解析顺序","slug":"浏览器加载文件及其解析运行顺序","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-25T04:09:07.524Z","comments":true,"path":"api/articles/浏览器加载文件及其解析运行顺序.json","excerpt":"<h3 id=\"浏览器加载文件及其解析顺序\"><a href=\"#浏览器加载文件及其解析顺序\" class=\"headerlink\" title=\"浏览器加载文件及其解析顺序\"></a>浏览器加载文件及其解析顺序</h3><hr>\n<ol>\n<li><p>用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求</p>\n</li>\n<li><p>下载 HTML，并解析执行，逐步构建 DOM 树</p>\n</li>\n<li><p>\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析</p>\n<p>注：如果使用 HTTP/2 推送技术，可以提前进行资源的推送</p>","keywords":null,"cover":null,"content":null,"text":"浏览器加载文件及其解析顺序用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求下载 HTML，并解析执行，逐步构建 DOM 树\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析注：如果使用 HTTP/2 推送技术，可以提前进行资源","link":"","raw":null,"photos":[],"categories":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/categories/文件加载顺序.json"}],"tags":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/tags/文件加载顺序.json"}]},{"title":"webpack之基础配置","slug":"webpack之基础配置","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之基础配置.json","excerpt":"<p>随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1forowys2uwj31kw0sgqcn.jpg","content":null,"text":"随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。 [Figure] 参考链接深入浅出 webpack： http://webpack.w","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"}]},{"title":"webpack之优化","slug":"webpack之优化","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之优化.json","excerpt":"<p>在上篇 <a href=\"https://winixt.github.io/webpack%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">webpack 之基础配置</a>讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tNc79ly1foswn2zlu3j31kw0vr7az.jpg","content":null,"text":"在上篇 webpack 之基础配置讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。 [Figure] 参考链接深入浅出 webpack： http://webpack.wuhaolin.cn/webpack 中文官网： https://","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}]},{"title":"深入理解 http/2","slug":"深入理解 http2","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.115Z","comments":true,"path":"api/articles/深入理解 http2.json","excerpt":"<blockquote>\n<p>以下内容摘自 <a href=\"https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">HTTP/2 简介</a> ，要了解更多请移步 <a href=\"http://shop.oreilly.com/product/0636920028048.do\" target=\"_blank\" rel=\"noopener\">《Web 性能权威指南》</a>（O’Reilly，作者：llya Grigorik）</p>\n</blockquote>\n<p>近来 HTTP/2 的声音不断在国内各个技术论坛响起，说什么 HTTP/2 可以带来多少多少性能提升，到底是如何实现的呢？我们一起来分析一下。</p>","keywords":null,"cover":"https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg?hl=zh-cn","content":null,"text":"以下内容摘自 HTTP/2 简介 ，要了解更多请移步 《Web 性能权威指南》（O’Reilly，作者：llya Grigorik）近来 HTTP/2 的声音不断在国内各个技术论坛响起，说什么 HTTP/2 可以带来多少多少性能提升，到底是如何实现的呢？我们一起来分析一下。HTT","link":"","raw":null,"photos":[],"categories":[{"name":"http/2","slug":"http-2","count":1,"path":"api/categories/http-2.json"}],"tags":[{"name":"http/2","slug":"http-2","count":1,"path":"api/tags/http-2.json"}]},{"title":"js 异步进化史之async","slug":"js异步进化史之async","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/js异步进化史之async.json","excerpt":"<p>我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1fo3j1dq8qjj30ko05fmxw.jpg","content":null,"text":"我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async [Figure] 哇～nice!nice!nice!最后最后的最后连更四篇博客 回调 &gt; promise &gt; generator &gt; async 真的累呀～而且还是写的冰山一角，可以","link":"","raw":null,"photos":[],"categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"async/await","slug":"async-await","count":1,"path":"api/tags/async-await.json"}]}]}