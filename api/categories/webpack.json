{"name":"webpack","slug":"webpack","count":3,"postlist":[{"title":"webpack4 H5活动页构建","slug":"webpack4活动构建","date":"2018-08-28T16:00:00.000Z","updated":"2019-02-25T13:43:18.584Z","comments":true,"path":"api/articles/webpack4活动构建.json","excerpt":"","keywords":null,"cover":"https://ws3.sinaimg.cn/large/006tNbRwly1fyj0dlmpwcj30dw09ajrz.jpg","content":"<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fyj0dlmpwcj30dw09ajrz.jpg\" alt=\"webpack4构建\"></p>\n<p>由于公司的H5活动页构建老旧，存在一系列问题，于是萌生了用 webpack4 重写整个构建的想法，在此记录下遇到的问题与对应的解决方案。</p>\n<p>⚠️ 本文不涉及 webpack4 配置的基础知识！</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ol>\n<li>支持单页和多页</li>\n<li>支持开发时的热更新</li>\n<li>构建过程可配置</li>\n<li>支持接口 mock</li>\n<li>支持 es6 语法</li>\n<li>弹性设配移动端屏幕</li>\n</ol>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><pre>\n|-- lib 活动专用 js 脚本\n|-- thirdsrc 第三方代码库\n|-- build 构建脚本\n|-- mock mock 数据\n|-- template 模版\n    |-- css\n    |-- js\n    |-- entry 入口文件，处理一些公用逻辑\n    |-- img\n    |-- view.html\n</pre>\n\n<h3 id=\"依赖的第三方库\"><a href=\"#依赖的第三方库\" class=\"headerlink\" title=\"依赖的第三方库\"></a>依赖的第三方库</h3><h4 id=\"zepto\"><a href=\"#zepto\" class=\"headerlink\" title=\"zepto\"></a>zepto</h4><p>引入 zepto 是为了提高 dom 的操作效率，并且符合团队人员的开发习惯。为了不让基础依赖库过大，只引入了 zepto 中的 zepto、event、ajax 三个模块。</p>\n<p>没有考虑使用 vue、react 等框架的原因：虽然引入第三方框架，能够更好的复用代码，降低开发人员开发切换开发代价，但是会引入一个更大的问题，依赖基础包太大了，在用户网络不好的情况下，及其影响用户体验。为了一个活动页，引入这么重的框架不值得。如果 vue3.0 实现它的目标，压缩后只有 10k，那么是一个非常好的选择。</p>\n<h4 id=\"fastclick\"><a href=\"#fastclick\" class=\"headerlink\" title=\"fastclick\"></a>fastclick</h4><p>由于我们的代码还要运行在 ios 老的 webview 上，依然会有 click 延迟 300ms 问题，因此引入这个基础库。</p>\n<h4 id=\"引入方式\"><a href=\"#引入方式\" class=\"headerlink\" title=\"引入方式\"></a>引入方式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'/path/to/fastclick'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'/path/to/zepto'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片问题\"><a href=\"#图片问题\" class=\"headerlink\" title=\"图片问题\"></a>图片问题</h3><p>图片是前端不可忽视的重资源问题，尽管图片解析渲染非常快（相比同等大小的js）。但是过大的图片会导致页面有段空白期，甚至出现页面抖动，造成非常糟糕的用户体验。</p>\n<h4 id=\"大图片\"><a href=\"#大图片\" class=\"headerlink\" title=\"大图片\"></a>大图片</h4><ol>\n<li>使用 image-webpack-loader 进行图片的压缩</li>\n<li>在 CDN 上存储.png 和 .webp 两种格式的图片，客户端判断能用webp 就用 webp（判断是否支持 webp 需要一定的时间，可将判断结果持久化存储在本地），或者直接在 CDN 实现。如果产品运行在 webview 可以引入基础库，直接对 webp 进行支持。</li>\n</ol>\n<h4 id=\"小图标\"><a href=\"#小图标\" class=\"headerlink\" title=\"小图标\"></a>小图标</h4><p>svg 在移动端支持的非常好了，搭配 http/2，跑的飞起，没有理由不用。虽然在 android &lt;= 4.3 会将 svg 转换成非矢量图在渲染，但是看看你的应用在 android &lt;= 4.3 有多少用户量吧。</p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>直接上 postcss，能将 px 转换成 rem，能 autoprefixer(还能根据需要兼容的浏览器进行配置，当然更好的方式是使用 .browserslistrc，这才是业界标准)，能压缩 cssnano。</p>\n<p>Normalize.css 当然不能少<a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"noopener\">normalize.css</a> </p>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><h4 id=\"动态-polyfill\"><a href=\"#动态-polyfill\" class=\"headerlink\" title=\"动态 polyfill\"></a>动态 polyfill</h4><p>由于大部分用户用的都是“现代”手机，因此大部分 polyfill 对于大部分用户来是不需要的。可以自己搭服务器实现类似 <a href=\"http://link.zhihu.com/?target=https%3A//polyfill.io/\" target=\"_blank\" rel=\"noopener\">polyfill.io</a> 的功能。具体性能优势，<a href=\"https://zhuanlan.zhihu.com/p/37148975\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h4 id=\"编译成-es\"><a href=\"#编译成-es\" class=\"headerlink\" title=\"编译成 es+\"></a>编译成 es+</h4><p>同样，对于大部分用户是能运行 es6 的，所以不必将所有代码编译成 es5。可以编译成两套代码，一套 es6，一套 es5 用于兼容底端设备。具体方案，<a href=\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>下面通过代码直接分析遇到的问题。</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><p>由于我们的需求比较简单，使用 html-webpack-plugin 能解决我们的单页多页问题。</p>\n<p>处理 html  重的图片： 使用 html-loader</p>\n<p>html 热更新，在 entry 文件，加入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/html'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>由于我们是活动页，比较适合将 css 注入 style 标签中，实现方式如下：</p>\n<ol>\n<li>mini-css-extract-plugin 提取 css</li>\n<li>style-ext-html-webpack-plugin 将提取的 css 注入 html 文件</li>\n</ol>\n<p>⚠️ mini-css-extract-plugin 插件要在 style-ext-html-webpack-plugin 之前</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取多个文件 css 的 webpack 配置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generaterStyleChunk</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> styleChunk = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> page <span class=\"keyword\">of</span> config.pages) &#123;</span><br><span class=\"line\">        styleChunk[page + <span class=\"string\">'style'</span>] = &#123;</span><br><span class=\"line\">            name: page,</span><br><span class=\"line\">            test: <span class=\"function\">(<span class=\"params\">m,c,entry = page</span>) =&gt;</span> m.constructor.name === <span class=\"string\">'CssModule'</span> &amp;&amp; recursiveIssuer(m) === entry,</span><br><span class=\"line\">            chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">            enforce: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> styleChunk;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要注意的是，不能将 css 打包进 js 中</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        runtimeChunk: <span class=\"string\">'single'</span>,</span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            cacheGroups: <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">                common: &#123;</span><br><span class=\"line\">                    test(<span class=\"built_in\">module</span>, chunks) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> result = <span class=\"built_in\">module</span>.type === <span class=\"string\">'javascript/auto'</span> &amp;&amp; <span class=\"regexp\">/\\/node_modules\\//</span>.test(<span class=\"built_in\">module</span>.context);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.type);</span><br><span class=\"line\">                            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.context);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    name: <span class=\"string\">'common'</span>,</span><br><span class=\"line\">                    chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">                    priority: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, generaterStyleChunk())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"保证chunk-名字变动最小\"><a href=\"#保证chunk-名字变动最小\" class=\"headerlink\" title=\"保证chunk 名字变动最小\"></a>保证chunk 名字变动最小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.NamedChunksPlugin(<span class=\"function\">(<span class=\"params\">chunk</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> hashChunk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> md5(<span class=\"built_in\">Array</span>.from(chunk.modulesIterable, (m) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> m.identifier();</span><br><span class=\"line\">                &#125;).join()).slice(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chunk.name ? chunk.name : hashChunk()</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h3><p>支持 async/await 需要 @babel/plugin-transform-runtime</p>\n<p>分析代码输出 webpack-bundle-analyzer</p>\n<p>分析 babel，debug: true</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>你需要明白，想要构建成什么样，能用资源有哪些，可以做到什么地步。然后一步步分析，实现你想要的模样。</p>\n","text":" [Figure] 其他问题支持 async/await 需要 @babel/plugin-transform-runtime分析代码输出 webpack-bundle-analyzer分析 babel，debug: true总结你需要明白，想要构建成什么样，能用资源有哪些，可以","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"},{"name":"活动","slug":"活动","count":1,"path":"api/tags/活动.json"}]},{"title":"webpack之优化","slug":"webpack之优化","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之优化.json","excerpt":"<p>在上篇 <a href=\"https://winixt.github.io/webpack%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">webpack 之基础配置</a>讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tNc79ly1foswn2zlu3j31kw0vr7az.jpg","content":null,"text":"在上篇 webpack 之基础配置讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。 [Figure] 参考链接深入浅出 webpack： http://webpack.wuhaolin.cn/webpack 中文官网： https://","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}]},{"title":"webpack之基础配置","slug":"webpack之基础配置","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之基础配置.json","excerpt":"<p>随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。</p>","keywords":null,"cover":"https://ws4.sinaimg.cn/large/006tKfTcgy1forowys2uwj31kw0sgqcn.jpg","content":null,"text":"随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。 [Figure] 参考链接深入浅出 webpack： http://webpack.w","link":"","raw":null,"photos":[],"categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"}]}]}