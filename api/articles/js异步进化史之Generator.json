{"title":"js 异步进化史之Generator","slug":"js异步进化史之Generator","date":"2019-02-24T04:20:08.112Z","updated":"2019-02-24T04:20:08.112Z","comments":true,"path":"api/articles/js异步进化史之Generator.json","photos":[],"link":"","excerpt":"在介绍 Generator 和异步的关系之前，我们先分析下 Generator。看看它给我们带来了什么惊奇的表现。<br>","covers":["https://ws2.sinaimg.cn/large/006tKfTcgy1fo38ppgt76j30s20dsdyc.jpg"],"content":"<p>在介绍 Generator 和异步的关系之前，我们先分析下 Generator。看看它给我们带来了什么惊奇的表现。<br><a id=\"more\"></a><br><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fo38ppgt76j30s20dsdyc.jpg\" alt=\"图片\"></p>\n<p>下文将会按照这个顺序逐步解析 Genenrator:</p>\n<ol>\n<li>什么是 Generator?</li>\n<li>Generator 和 iterator</li>\n<li>Generator 和 异步</li>\n</ol>\n<p>相信看完下文后，再回过头来看上图 yield 是多么贴切😊</p>\n<h3 id=\"什么是-Generator\"><a href=\"#什么是-Generator\" class=\"headerlink\" title=\"什么是 Generator?\"></a>什么是 Generator?</h3><hr>\n<p>在 Generator 之前，js 的函数是一个最小执行单位，一旦开始运行，就会运行到结束，期间不会有其他代码能够打断并插入其间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"comment\">// 想在这里暂停一下，先对 a 执行一下其他算数操作，再进行下一步</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 要么提前对 a 操作</span></span><br><span class=\"line\">  foo();</span><br><span class=\"line\">  <span class=\"comment\">// 要么延迟对 a 操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上面这样的普通函数，我们是没有办法对其进行中断的，foo 函数打印的两个 a 始终会一样。</p>\n<p>虽然很容易通过其他方式实现上述需求，但是我就是这么任性，就要在两个 console 之间暂停，怎么办呢？</p>\n<p>Generator 犹如周星驰上赌场，风流潇洒的进入了我们的视野\u0010\u0010\u0010～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>; <span class=\"comment\">// 在这里暂停</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造一个 iterator 控制整个 generator</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> it = foo();</span><br><span class=\"line\">  it.next();</span><br><span class=\"line\">  a ++;</span><br><span class=\"line\">  it.next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main(); <span class=\"comment\">// 输出 1, 2</span></span><br></pre></td></tr></table></figure>\n<p>细心的同学可能发现了 foo 函数的一些变化（发现的不了的是有多粗的心呀～</p>\n<p>foo 函数前面多了一个 * 符号，并且两个 console 语句之间多了一个 yield 语句。main 中 foo 的执行也有了很大改变。不急我们从 main 函数的执行开始一步一步来分析：</p>\n<ol>\n<li>it = foo()，并没有执行生成器 *foo()，而是构造了一个 iterator，由这个 iterator 控制生成器的执行；</li>\n<li>第一条 it.next() 语句启动生成器 *foo()，并执行第一条 console.log(a) 语句，此时 a = 1；</li>\n<li>生成器 <em>foo() 遇到 yield 语句停止，并且在这点上，第一条 it.next 语句停止。此时 </em>foo() 仍在运行并且是活跃的，但处于暂停状态；</li>\n<li>执行语句 a ++，此时 a = 2；</li>\n<li>执行第二条 it.next() 语句，*foo() 生成器从暂停恢复执行，执行第二条 console.log(a) 此时输出 2；</li>\n</ol>\n<p>因此可以看出 Generator 函数是一类特殊的函数，可以在一处或多处暂停，并且不一定要执行完。</p>\n<p>注：Generator 函数有三种写法：function <em>foo()、function\\</em> foo()、 function*foo()。喜欢那种都没有关系，坚持一种风格就可以了，下文将采用第一种。</p>\n<h4 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h4><p>我我我…</p>\n<p>我什么我，直接看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\">it.next(); <span class=\"comment\">// 运行到 yield 语句暂停</span></span><br><span class=\"line\">it.next(<span class=\"number\">2</span>); <span class=\"comment\">// console 将输出 2</span></span><br></pre></td></tr></table></figure>\n<p>可以通过 next() 方法向 Generator 函数内部传递值。</p>\n<blockquote>\n<p>注意第一个 next() 不接受任何参数，即使传参数进去也会被忽略，因为没有相应的  yield 受理</p>\n</blockquote>\n<p>再看看输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">2</span>)); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以看出 next 方法返回一个对象，包含 value、done 两个字段</p>\n<ul>\n<li>value: iterator 返回的任意 javascript 值</li>\n<li>done: 表示是否遍历到 iterator 的末端，是的话 done 为 true, 否则 false</li>\n</ul>\n<p>那么第二个 it.next() 语句的 value 为什么是 undefined? 因为最后一个 next 的 value 值为函数的返回值（return），默认返回值 undefined</p>\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><p>真正健壮的代码是需要完善的错误处理机制的，Generator 也不例外：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  it.throw(<span class=\"string\">'generator Erorr'</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err + <span class=\"string\">' outer'</span>); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 *foo() hai 没有启动，就抛出错误，只能从函数外部进行错误捕获。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  it.throw(<span class=\"string\">'generator Erorr'</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err + <span class=\"string\">' outer'</span>); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">+++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// request error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\">it.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ajax(<span class=\"string\">'http://example.com'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    it.throw(<span class=\"string\">'request error'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>抛入 Generator 里面的错误，可以由内部捕获，异步也一样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  it.throw(<span class=\"string\">'generator Erorr'</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err + <span class=\"string\">' outer'</span>); <span class=\"comment\">// 执行 generator 没有捕获的往外抛出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多个-iterator\"><a href=\"#多个-iterator\" class=\"headerlink\" title=\"多个 iterator\"></a>多个 iterator</h4><p>不知道各位同学有没有注意到上文的一个细节，我写 Generator 都是用大写（ js 编程习惯，类首字母大写）。因为我们 Generator 也跟类类似，每生成一个 iterator 相当于生成一个该 Generator 的实例。来玩一个好玩的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  a++;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  b = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  b *=b;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a, b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it1 = foo();</span><br><span class=\"line\"><span class=\"keyword\">const</span> it2 = foo();</span><br><span class=\"line\"></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// a = 2; b = 1;</span></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// a = 2; b = 3;</span></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// a = 2; b = 9;</span></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// 2, 9;</span></span><br><span class=\"line\"></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// a = 3; b = 9;</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// a = 3; b = 12;</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// a = 3; b = 144;</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// 3, 144</span></span><br></pre></td></tr></table></figure>\n<p>好了， 到目前没什么问题，让我们换换顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it1.next(); <span class=\"comment\">// a = 2; b = 1;</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// a = 3; b = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// a = 3; b = 4;</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// a = 3; b = 7;</span></span><br><span class=\"line\"></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// a = 3; b = 49</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// a = 3; b = 49 * 49</span></span><br><span class=\"line\"></span><br><span class=\"line\">it1.next(); <span class=\"comment\">// 3, 49</span></span><br><span class=\"line\">it2.next(); <span class=\"comment\">// 3, 49 * 49</span></span><br></pre></td></tr></table></figure>\n<p>只要安排的合理，换换执行顺序就能得到不同的值。这还是只有两个实例，更多实例呢？*foo() 设计的更巧妙呢？把输入，输出加上去呢？ 不止一个 Generator 共享数据呢？感觉可以出个脑力游戏了，哈哈</p>\n<p>那到底 iterator 是怎么一个机制呢？下面一起来看看</p>\n<h3 id=\"Generator-和-iterator\"><a href=\"#Generator-和-iterator\" class=\"headerlink\" title=\"Generator 和 iterator\"></a>Generator 和 iterator</h3><hr>\n<p>iterator 是 ES6 提出来的一个新概念，定义了 iterator 的 Object 可以被 for…of 循环使用。</p>\n<p>现在有一个要求，要你打印斐波那契数列（前面两位数相加，作为第三位数 1,1,2,3,5,8…..），你很可能很快写出下列代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val1 === <span class=\"number\">0</span> &amp;&amp; val2 === <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">      val2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = val1 + val2;</span><br><span class=\"line\">    val1 = val2;</span><br><span class=\"line\">    val2 = result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(func()); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<p>要一个一个执行有点麻烦呀，我们来改改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;&#125;,</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val1 === <span class=\"number\">0</span> &amp;&amp; val2 === <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">        val2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          value: <span class=\"number\">1</span>,</span><br><span class=\"line\">          done: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = val1 + val2;</span><br><span class=\"line\">      val1 = val2;</span><br><span class=\"line\">      val2 = result;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: result,</span><br><span class=\"line\">        done: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> func) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (v &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55</span></span><br></pre></td></tr></table></figure>\n<p>for…of 循环会每次去调用 next()，直到 done 为 true。上面的代码其实就是一个 iterator，因为它的接口中有一个 next 方法。</p>\n<p>既然我们生成器也是返回的也是 iterator ，我们再来改改上面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> val2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val1 === <span class=\"number\">0</span> &amp;&amp; val2 === <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">        val2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> val2;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = val1 + val2;</span><br><span class=\"line\">      val1 = val2;</span><br><span class=\"line\">      val2 = result;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> func()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (v &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55</span></span><br></pre></td></tr></table></figure>\n<p>是不是优雅很多 😊</p>\n<p>但是像上面的代码 while(true)，我们是不是没有办法停止 Generator 了？</p>\n<p>有，我们一起来看看</p>\n<h4 id=\"停止-Generator\"><a href=\"#停止-Generator\" class=\"headerlink\" title=\"停止 Generator\"></a>停止 Generator</h4><p>上面的例子中 break 之后，iterator 貌似就处于永远挂起状态了。实际上，for…of 循环发生“异常结束”（提前终止），通常由 break、return 或者未捕获异常引起，会向 Generator 的 iterator 发送一个信号使其终止。</p>\n<p>可以这样用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> it = func();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> it &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (v &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    it.return(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在 Generator 内有 try…finally 语句，它将总是运行，即使生成器外部结束。如果需要清理资源的话（数据库连接等），这一点非常有用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val1 === <span class=\"number\">0</span> &amp;&amp; val2 === <span class=\"number\">0</span>)  &#123;</span><br><span class=\"line\">          val2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">yield</span> val2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = val1 + val2;</span><br><span class=\"line\">        val1 = val2;</span><br><span class=\"line\">        val2 = result;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 做清理工作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 不是说好我们今天的主题是 Generator 和异步嘛？怎么看了半天，异步的影子都没见着？</p>\n<p>不急不急，磨刀不误砍柴工嘛。</p>\n<p>action!</p>\n<h3 id=\"Generator-和-异步\"><a href=\"#Generator-和-异步\" class=\"headerlink\" title=\"Generator 和 异步\"></a>Generator 和 异步</h3><hr>\n<p>其实我们上面已经稍微提到了 Generator 和 异步。</p>\n<p>过去半个世纪了谁还记得呀？哼！</p>\n<p>好吧～，我的锅</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = yeild;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\">it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(<span class=\"string\">'http://example.com'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    it.throw(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    it.next(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>前面介绍 Generator 错误处理的时候，已经说明了可以 Generator 捕获异步异常是不是很棒\u0010？</p>\n<p>还有，仔细看看前面对的代码，看似同步执行，实际上却可以异步，是不是更加棒棒？</p>\n<h4 id=\"Generator-和-Promise\"><a href=\"#Generator-和-Promise\" class=\"headerlink\" title=\"Generator 和 Promise\"></a>Generator 和 Promise</h4><p>既然 Promise 能够解决回调的信任的问题，不清楚建议先看看<a href=\"/js%E5%BC%82%E6%AD%A5%E8%BF%9B%E5%8C%96%E5%8F%B2%E4%B9%8BPromise/\">js 异步进化史之Promise</a>，我们将 Generator 与 Promise 结合起来看看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    ajax(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = yeild request(url);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = foo();</span><br><span class=\"line\"></span><br><span class=\"line\">it.next().value    </span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    it.next(data);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    it.throw(err);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>是不是优雅了很多？不仅解决了 Promise 处理错误的问题，还以更同步的方式编写异步代码。</p>\n<p>但是还有个小小的遗憾，then 还是要我们手动调用。如果有什么能够自动处理 then 就好了。</p>\n<p>还真有，请看这个缩小版：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> it = gen.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleNext</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = it.next(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleResult</span>(<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.value;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(next.value)</span><br><span class=\"line\">               .then(handleNext, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleError</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(it.throw(err))</span><br><span class=\"line\">                        .then(handleResult);</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(next);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们的代码就变成了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = yeild request(url);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(foo, <span class=\"string\">'http://example.com'</span>);</span><br></pre></td></tr></table></figure>\n<p>简直逆天了～，异步代码同步写呀</p>\n<p>如果你用 co 库，那么上面的代码你会非常熟悉</p>\n<h4 id=\"Generator-委托\"><a href=\"#Generator-委托\" class=\"headerlink\" title=\"Generator 委托\"></a>Generator 委托</h4><p>至今为止，我们还没有试过在 Generator 里面调用 Generator，如果调用会发生什么呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r1 = request(<span class=\"string\">'http://example.com?index1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r2 = request(<span class=\"string\">'http://example.com?index2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r2 = run(foo);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r3 = request(<span class=\"string\">'http://example.com?index3'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(bar);</span><br></pre></td></tr></table></figure>\n<p>你可能会问真的需要使用两次 run 函数吗？不能像普通函数一样，直接一个调用另外一个吗？</p>\n<p>可以的，小伙子你很聪明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'C'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'D'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">yield</span> *foo();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result + <span class=\"string\">' return to bar'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'E'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'F'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = bar();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// B   此处 it 已经委托到 foo</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// C</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// E </span></span><br><span class=\"line\"><span class=\"comment\">// D return to bar</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// F</span></span><br></pre></td></tr></table></figure>\n<p>上面这种 iterator 的转换称为 Generator 委托。</p>\n<p>事件也可以委托，🆒</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'B'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// foo error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'C'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'D'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'A'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">yield</span> *foo();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result + <span class=\"string\">' return to bar'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'E'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'F'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> it = bar();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next().value); <span class=\"comment\">// B   此处 it 已经委托到 foo</span></span><br><span class=\"line\">it.throw(<span class=\"string\">'foo error'</span>);</span><br></pre></td></tr></table></figure>\n<p>然后我们刚开始的代码就可以改为只需要使用一次 run：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r1 = request(<span class=\"string\">'http://example.com?index1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r2 = request(<span class=\"string\">'http://example.com?index2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r2 = *foo();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r3 = request(<span class=\"string\">'http://example.com?index3'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(r2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(bar);</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><hr>\n<p>Generator 已经可以让我们实现以同步的方式编写异步代码了，但是有个小小遗憾，就是要额外引入 Generator 库，例如 co：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"keyword\">yield</span> requst(<span class=\"string\">'http://example.com'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>而且还多了 co～</p>\n<p>很好有极致的编程思维</p>\n<p>ES 工作组的大佬们也早已洞察到了这一点，于是在 ES7 上添加了更为强大的异步工具</p>\n<p><strong>async/await</strong></p>\n<p>请看下一篇：js异步进化史之async</p>\n","categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"Generator","slug":"Generator","count":1,"path":"api/tags/Generator.json"}]}