{"title":"webpack之基础配置","slug":"webpack之基础配置","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之基础配置.json","photos":[],"link":"","excerpt":"随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。","covers":["https://ws4.sinaimg.cn/large/006tKfTcgy1forowys2uwj31kw0sgqcn.jpg"],"content":"<p>随着 web 应用逐渐复杂、前端技术的日新月异，前端代码的可扩展性、可维护性不断被提上议程。前端代码工程化的问题急需被解决，从模块化到构建工具，一代代发展，webpack 顺势而生，力压群雄。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1forowys2uwj31kw0sgqcn.jpg\" alt=\"图片\"></p>\n<p>在回答为什么需要解决前端工程化的问题前，先问问自己几个问题：</p>\n<ol>\n<li>当使用 es6 开发前端应用时，如何将其编译成 es5 在低端浏览器运行？</li>\n<li>如何把多模块合并为一个文件？</li>\n<li>如何进行文件压缩？</li>\n<li>如何提取多个页面的公共代码？</li>\n<li>如何实现懒加载？</li>\n<li>多人合作开发，如何进行代码校验，尽量保持代码风格的统一？</li>\n<li>如何自动实现代码发布？</li>\n<li>….</li>\n</ol>\n<p>你可能会说，以上可以利用现有库或者自行开发一些工具函数实现呀！</p>\n<p>不错，是可以，单单一个大点的项目手动实现的工作量就已经很惊人了，如果有多个项目呢？而构建工具，例如：webpack，可以通过简单的配置自动解决上述问题，减少大量重复的劳作时间，提高开发效率。</p>\n<p>由于 webpack 是目前最好的构建工具，有良好的生态链和维护团队。下面我们重点来深入理解下 webpack。进而更好的应用于我们的产品当用，提高我们的开发效率和产品性能。</p>\n<p>我们先来介绍 webpack 的几个核心概念，让你内心对 webpack 有个整体的认知，方便后面对 webpack 的学习：</p>\n<ul>\n<li><strong>Entry</strong>: 入口，webpack 执行构建的入口。</li>\n<li><strong>Module</strong>: 模块，webpack 视一切为模块，每一个文件为一个模块。webpack 会从 Entry 入口文件递归查找所有依赖文件。</li>\n<li><strong>Chunk</strong>: 代码块，一个 Chunk 由多个模块组成，用于合并和分割代码。</li>\n<li><strong>Loader</strong>: 模块转换器，用于把模块内容转换成新的内容，例如：scss，转换成 css。</li>\n<li><strong>Plugin</strong>: 插件，用于在 webpack 构建流程中的特定时机注入扩展逻辑来改变构建或做其他事情。</li>\n<li><strong>Output</strong>: 输出结果，webpack 完成构建后，将一系列文件输出。</li>\n</ul>\n<p>webpack 启动后会从 Entry 开始递归解析 Entry 所依赖的所有 Module。每找到一个 Module，就会根据配置的 Loader 去找出对应的转换规则，对 Module 转换后，再解析出当前 Module 所依赖的 Module。这些模块会以 Entry 为单位进行分组，一个 Entry 和其所依赖的 Module 被分到一个组，也就是一个 Chunk。最后 webpack 会把所有 Chunk 转换成文件输出。在整个处理流程中，webpack 会在恰当的时机执行 Plugin 定义的逻辑。</p>\n<h3 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h3><hr>\n<p>entry 是 webpack 构建入口，可以理解为构建起点。webpack 将从 entry 递归遍历所有依赖的 module。</p>\n<h4 id=\"context\"><a href=\"#context\" class=\"headerlink\" title=\"context\"></a>context</h4><p>webapck 查找相对路径的文件会以 context 为根目录，默认值为执行 webpack 的当前工作目录。可以通过以下方式设置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    context: path.resolve(__dirname, <span class=\"string\">'otherWorkPath'</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：context 必须为绝对路径，除了配置文件还可以通过 webpack —context 设置。</p>\n<p>先在这里介绍 context，是因为 entry 路径和其他依赖模块的路径可能采用相对于 context 的路径来描述。</p>\n<h4 id=\"entry-用法\"><a href=\"#entry-用法\" class=\"headerlink\" title=\"entry 用法\"></a>entry 用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用法1(单入口）：entry: string|Array&lt;string&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./path/to/my/entry/file.js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法2（对象语法）：entry: &#123;[entryChunkName: string]: string|Array&lt;string&gt;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app.js'</span>,</span><br><span class=\"line\">        vendors: <span class=\"string\">'./src/vendors.js'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这只是一个简单的示范，后续文章会根据实例进一步详细说明。</p>\n<h4 id=\"Chunk-名称\"><a href=\"#Chunk-名称\" class=\"headerlink\" title=\"Chunk 名称\"></a>Chunk 名称</h4><p>webpack 生成的 Chunk 名称与 Entry 的配置有关：</p>\n<ul>\n<li>entry 是一个 string 或 array，那么生成的 Chunk 名称为 main。</li>\n<li>entry 是一个 object，那么生成的 Chunk 名称为 object 键值对应的键名。</li>\n</ul>\n<h4 id=\"动态-entry\"><a href=\"#动态-entry\" class=\"headerlink\" title=\"动态 entry\"></a>动态 entry</h4><p>如果有多个页面需要配置 entry，并且可能还会增加新的页面，entry 可能受其他因素影响不能写成静态值，需要动态配置，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步</span></span><br><span class=\"line\">entry: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        pageOne: <span class=\"string\">'./pageOne/index.js'</span>,        </span><br><span class=\"line\">        pageTwo: <span class=\"string\">'./pageTwo/index.js'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步</span></span><br><span class=\"line\">entry: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">            pageOne: <span class=\"string\">'./pageOne/index.js'</span>,        </span><br><span class=\"line\">        \tpageTwo: <span class=\"string\">'./pageTwo/index.js'</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h3><hr>\n<p>配置 output 选项控制 webpack 如何向硬盘写入文件，是一个 object，里面包含一系列配置选项。</p>\n<h4 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"filename\"></a>filename</h4><p>配置输出文件名称：string，当只有一个文件时可以成静态文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename: &apos;bundle.js&apos;</span><br></pre></td></tr></table></figure>\n<p>当有多个 Chunk 时，需要借助模版和变量。前面说到 webpack 会为每个 Chunk 生成一个文件名，可以这样用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filname: &apos;[name].js&apos;</span><br></pre></td></tr></table></figure>\n<p>[name] 代表用内置变量 name 去代替 [name]，类似于 es6 的模版字符串。除了 name 还包括：</p>\n<ul>\n<li><strong>id</strong>： Chunk 的唯一标识，从 0 开始。</li>\n<li><strong>name</strong>: Chunk 名称。</li>\n<li><strong>hash</strong>: Chunk 唯一标识 的 hash 值。</li>\n<li><strong>chunkhash</strong>: Chunk 内容 hash 值。</li>\n</ul>\n<p>其中 hash 和 chunkhash 值的长度是可指定的，[chunkhash: 8] 代表取 8 位的 chunkhash 值，默认是 20。 </p>\n<blockquote>\n<p>注意 <a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">ExtractTextWebpackPlugin</a> 插件是使用 <code>contenthash</code> 来代表哈希值而不是 <code>chunkhash</code>， 原因在于 ExtractTextWebpackPlugin 提取出来的内容是代码内容本身而不是由一组模块组成的 Chunk。</p>\n</blockquote>\n<h4 id=\"chunkFilename\"><a href=\"#chunkFilename\" class=\"headerlink\" title=\"chunkFilename\"></a>chunkFilename</h4><p>output.chunkFilename 用于配制无入口的 Chunk 在输出时的文件名称。通常配合 CommonsChunkPlugin(用于提取公共代码的插件) 和动态加载使用。配置方式和 output.filename 一样。</p>\n<blockquote>\n<p>注意：在 webpack4.0 commonsChunkPlugin 被移除，用 optimization.splitChunks 和 optimization.runtimeChunk 取代。</p>\n</blockquote>\n<h4 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h4><p>output.path 配置构建输出文件的位置，必须是 string 类型的绝对路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path: path.resolve(__dirname, &apos;dist&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"publicPath\"><a href=\"#publicPath\" class=\"headerlink\" title=\"publicPath\"></a>publicPath</h4><p>output.publicPath 默认值为 ‘’ 空字符串，即 webpack 构建出的资源默认使用相对路径。如果需要使用 CDN 加速，让客户端去 CDN 服务器加载资源，则需要更改 publicPath 的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publicPath: &apos;//cdn.example.com/assets/&apos;</span><br></pre></td></tr></table></figure>\n<p>这时发布到线上的代码地址为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;//cdn.example.com/assets/filename_[hash].js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"crossOriginLoading\"><a href=\"#crossOriginLoading\" class=\"headerlink\" title=\"crossOriginLoading\"></a>crossOriginLoading</h4><p>output.crossOriginLoading 配置异步加载资源是否带 cookie:</p>\n<ul>\n<li>anonymous （默认）加载此脚本资源时不会带上用户的 cookie。</li>\n<li>use-credentials 加载异步资源时带上用户的 cookie。</li>\n</ul>\n<p>注意：这里只介绍了几个常用配置，详细请上<a href=\"https://doc.webpack-china.org/concepts/output/\" target=\"_blank\" rel=\"noopener\">官方文档</a>查看。下文也类似。</p>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><hr>\n<p>module 配置如何处理不同类型的模块。</p>\n<h4 id=\"配置-Loader\"><a href=\"#配置-Loader\" class=\"headerlink\" title=\"配置 Loader\"></a>配置 Loader</h4><p>rules 配置模块的读取和解析规则，通常用来配置 loader。类型为 array，描述了如何处理部分文件，配置规则如下：</p>\n<ol>\n<li>条件配置：通过 test、include、exclude 三个配置项来命中需要 loader 处理的文件。</li>\n<li>loader: 对命中的文件通过 use 配置来应用 loader，也可以给 loader 传递参数。</li>\n<li>重置顺序：一组 loader 处理顺序默认是从右往左执行的，可以通过 enforce 选项让其中一个 loader 最前或最后</li>\n</ol>\n<p>下面我们通过例子来说明一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\"> rules: [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过正则命中 js 文件</span></span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 babel-loader 转换 js 文件</span></span><br><span class=\"line\">      <span class=\"comment\">// ?cacheDirectory 表示给 babel-loader 传递参数，用于缓存 babel 编译结果加快重新编译速度</span></span><br><span class=\"line\">      use: [<span class=\"string\">'babel-loader?cacheDirectory'</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 只处理 src 中的 js 文件</span></span><br><span class=\"line\">      include: path.resolve(__dirname, <span class=\"string\">'src'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递给 loader 的参数可以是 object</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\"> rules: [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过正则命中 js 文件</span></span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 babel-loader 转换 js 文件</span></span><br><span class=\"line\">      <span class=\"comment\">// ?cacheDirectory 表示给 babel-loader 传递参数，用于缓存 babel 编译结果加快重新编译速度</span></span><br><span class=\"line\">       use: [&#123;</span><br><span class=\"line\">           loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">           options: &#123;</span><br><span class=\"line\">               cacheDirectory: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"comment\">// enforce: 'post' 表示该 loader 执行顺序放到最后</span></span><br><span class=\"line\">           <span class=\"comment\">// enforce: 'pre' 表示 loader 执行顺序放到最前面</span></span><br><span class=\"line\">           enforce: <span class=\"string\">'post'</span></span><br><span class=\"line\">       &#125;],</span><br><span class=\"line\">      <span class=\"comment\">// 不处理 node_modules 中的 js 文件</span></span><br><span class=\"line\">      exclude: path.resolve(__dirname, <span class=\"string\">'node_modules'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test | include | exclude 可以是数组</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\"> rules: [</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      test: [<span class=\"regexp\">/\\.js$/</span>, /\\.ts$/],</span><br><span class=\"line\">      include: [</span><br><span class=\"line\">          path.resolve(__dirname, <span class=\"string\">'pageOne'</span>),</span><br><span class=\"line\">          path.resolve(__dirname, <span class=\"string\">'pageTwo'</span>)</span><br><span class=\"line\">      ],</span><br><span class=\"line\">       exclude: [</span><br><span class=\"line\">           path.resolve(__dirname, <span class=\"string\">'node_modules'</span>),</span><br><span class=\"line\">           path.resolve(__dirname, <span class=\"string\">'bower_modules'</span>)</span><br><span class=\"line\">       ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"noParse\"><a href=\"#noParse\" class=\"headerlink\" title=\"noParse\"></a>noParse</h4><p>noParse 用于忽略没有采用模块化的文件的递归解析和处理。例如，jquery、ChartJS 等：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 正则匹配</span><br><span class=\"line\">noParse: /jquery|chartjs/</span><br><span class=\"line\"></span><br><span class=\"line\">// webpack3.0 后支持函数</span><br><span class=\"line\">noParse: (content) =&gt; &#123;</span><br><span class=\"line\">  // content 表示模块文件路径</span><br><span class=\"line\">  // return true or false</span><br><span class=\"line\">  return /jquery|chartjs/.test(content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Resolve\"><a href=\"#Resolve\" class=\"headerlink\" title=\"Resolve\"></a>Resolve</h3><hr>\n<p>resolve 可以配置 webpack 如何去查找模块对应的文件。</p>\n<h4 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h4><p>resolve.alias 配置通过别名，将原路径变为新路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    // import .. from &apos;react-native&apos; 替换为 </span><br><span class=\"line\">    // import .. from &apos;react-native-web</span><br><span class=\"line\">    &apos;react-native&apos;: &apos;react-native-web&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以通过 $ 缩小命中范围</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    &apos;react$&apos;: &apos;/path/to/react.min.js&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mainFields\"><a href=\"#mainFields\" class=\"headerlink\" title=\"mainFields\"></a>mainFields</h4><p>有些第三方模块会针对不同环境提供几分代码。例如，分别提供 es6 和 es5 2份代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;jsnext:main&quot;: &quot;es/index.js&quot;, // 采用 es6 语法入口文件</span><br><span class=\"line\">  &quot;main&quot;: &quot;lib/index.js&quot; // 采用 es5 语法入口文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack 会根据 mainFields 配置去决定优先采用那份文件，默认值为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainFields: [&apos;browser&apos;, &apos;main&apos;]</span><br></pre></td></tr></table></figure>\n<p>webpack 会根据数据里面的顺序去 package.json 文件里寻找，只会找到第一个。假如想采用 es6 的代码，应改配置为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainFields: [&apos;jsnext:main&apos;, &apos;browser&apos;, &apos;main&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"extensions\"><a href=\"#extensions\" class=\"headerlink\" title=\"extensions\"></a>extensions</h4><p>当导入的文件不带后缀时，webpack 会自动给文件匹配上后缀，然后查找文件是否存在，尝试后缀列表默认：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extensions: [&apos;.js&apos;, &apos;.json&apos;]</span><br></pre></td></tr></table></figure>\n<p>若你的 react 应用使用的是 jsx 后缀，可改配置为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extensions: [&apos;.jsx&apos;, &apos;.js&apos;, &apos;.json&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h4><p>配置 webpack 去哪找第三方模块，默认只会在 node_modules 找。若你的项目中有大量类似 import ‘../../componens/button’ 这样的导入模块路径，可以这样配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modules: [&apos;./src/components&apos;, &apos;node_modules&apos;]</span><br></pre></td></tr></table></figure>\n<p>然后通过 import ‘button’ 导入，提高开发效率。</p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><hr>\n<p>plugin 用于扩展 webpack 的功能，社区有各种 plugin 几乎可以做任何构建相关的事情。</p>\n<h4 id=\"plugin-配置\"><a href=\"#plugin-配置\" class=\"headerlink\" title=\"plugin 配置\"></a>plugin 配置</h4><p>plugin 配置很简单，将 plugin 的实例传入 plugins 即可。plugin 需要的参数可以通过 构造函数传入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">    compress: &#123;</span><br><span class=\"line\">      wrarning: false,</span><br><span class=\"line\">      drop_console: false,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"DevServer\"><a href=\"#DevServer\" class=\"headerlink\" title=\"DevServer\"></a>DevServer</h3><hr>\n<p>只有通过 DevServer 启动 webpack 时，devServer 选项才会生效，webpack 本身并不认识 devServer。</p>\n<h4 id=\"hot\"><a href=\"#hot\" class=\"headerlink\" title=\"hot\"></a>hot</h4><p>devServer.hot 是否启用热模块替换功能。启用热模块替换后，将会在不刷新页面的情况下用新模块代替旧模块。</p>\n<h4 id=\"historyApiFallback\"><a href=\"#historyApiFallback\" class=\"headerlink\" title=\"historyApiFallback\"></a>historyApiFallback</h4><p>devServer.historyApiFallback 用于使用了 HTML5 History API 的单页应用。这类应用要求服务器针对任何命中的路由都返回同一个 HTML 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">historyApiFallback: true</span><br></pre></td></tr></table></figure>\n<p>若有多个单页应用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">historyApiFallback: &#123;</span><br><span class=\"line\">  rewrites: [</span><br><span class=\"line\">    &#123;from: /^\\/user/, to: &apos;user.html&apos;&#125;,</span><br><span class=\"line\">    &#123;from: /^\\/game/, to: &apos;game.html&apos;&#125;,</span><br><span class=\"line\">    &#123;from: /./, to: &apos;index.html&apos;&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h4><p>DevServer 默认使用 HTTP，但是当你使用 HTTP/2 和 Service Worker 必须使用 https:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  https: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"open\"><a href=\"#open\" class=\"headerlink\" title=\"open\"></a>open</h4><p>devServer.open 配置是否在第一次启动时在默认浏览器上打开开发网页。</p>\n<h3 id=\"其他配置项\"><a href=\"#其他配置项\" class=\"headerlink\" title=\"其他配置项\"></a>其他配置项</h3><hr>\n<p>除了上面的配置项，webpack 还提供了一些零散的配置项。下面介绍几个常用的。</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h4><p>js 的应用场景越来越多，webpack 可以根据不同环境构建出不同的代码：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">target值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">web</td>\n<td style=\"text-align:left\">针对浏览器（默认），所有代码集中在一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">node</td>\n<td style=\"text-align:left\">针对 nodejs，使用 require 语句加载 chunk</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">async-node</td>\n<td style=\"text-align:left\">针对 nodejs，异步加载 chunk</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">webworker</td>\n<td style=\"text-align:left\">针对 webworker</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">electron-main</td>\n<td style=\"text-align:left\">针对 electron 主线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">electron-render</td>\n<td style=\"text-align:left\">针对 electron 渲染线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>例如，当设置 target: ‘node’ 时，require(‘fs’) 就不会将 fs 模块导入 chunk，更详细的介绍请看另一篇文章：webpack之react同构应用。</p>\n<h4 id=\"Devtool\"><a href=\"#Devtool\" class=\"headerlink\" title=\"Devtool\"></a>Devtool</h4><p>配置 webpack 如何生成 Source Map，方便进行代码调试。默认值为 false，即不生成 Source Map，可以这样配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devtool: &apos;source-map&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"extenals\"><a href=\"#extenals\" class=\"headerlink\" title=\"extenals\"></a>extenals</h4><p>extenals 告诉 webpack 哪些模块不用被打包进去，而是由外部环境提供，例如，当 html 文件中有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/path/to/jquery.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>可以这样配置，防止页面加载两份 jquery 文件（url 一份，打包一份）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">externals: &#123;</span><br><span class=\"line\">  // 把导入语句里的 jquery 替换成运行环境的全局变量 jQuery</span><br><span class=\"line\">  jquery: &apos;jQuery&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出多种配置\"><a href=\"#导出多种配置\" class=\"headerlink\" title=\"导出多种配置\"></a>导出多种配置</h3><hr>\n<p>通常需要从一份源码中构建出多份代码（开发环境、线上环境）等，但是之间的配置又很相似，如果写两份配置文件，则需要维护两份配置文件，工作量大，还容易出错，这时可以导出一个 Function，通过一个配置文件完成要求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack/lib/optimize/UglifyJsPlugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">env = &#123;&#125;, argv</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> plugins = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isProduction = env[<span class=\"string\">'production'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在生成环境才压缩</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isProduction) &#123;</span><br><span class=\"line\">    plugins.push(</span><br><span class=\"line\">      <span class=\"comment\">// 压缩输出的 JS 代码</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> UglifyJsPlugin()</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    plugins: plugins,</span><br><span class=\"line\">    <span class=\"comment\">// 在生成环境不输出 Source Map</span></span><br><span class=\"line\">    devtool: isProduction ? <span class=\"literal\">undefined</span> : <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><hr>\n<p>深入浅出 webpack： <a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">http://webpack.wuhaolin.cn/</a></p>\n<p>webpack 中文官网： <a href=\"https://doc.webpack-china.org/configuration/\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/configuration/</a></p>\n","categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"}]}