{"title":"浏览器加载文件及其解析顺序","slug":"浏览器加载文件及其解析运行顺序","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-25T04:09:07.524Z","comments":true,"path":"api/articles/浏览器加载文件及其解析运行顺序.json","photos":[],"link":"","excerpt":"浏览器加载文件及其解析顺序用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求下载 HTML，并解析执行，逐步构建 DOM 树\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析注：如果使用 HTTP/2 推送技术，可以提前进行资源的推送","covers":null,"content":"<h3 id=\"浏览器加载文件及其解析顺序\"><a href=\"#浏览器加载文件及其解析顺序\" class=\"headerlink\" title=\"浏览器加载文件及其解析顺序\"></a>浏览器加载文件及其解析顺序</h3><hr>\n<ol>\n<li><p>用户输入网址（假设是个 HTML 页面，并且是首次访问），浏览器向服务器发出请求</p>\n</li>\n<li><p>下载 HTML，并解析执行，逐步构建 DOM 树</p>\n</li>\n<li><p>\u0010如果发现有外部 css 文件，进行异步加载，不会阻塞 HTML 的解析</p>\n<p>注：如果使用 HTTP/2 推送技术，可以提前进行资源的推送</p>\n<a id=\"more\"></a>\n</li>\n<li><p>若果发现 HTML 文档中的图片资源，进行加载，也不会阻塞 HTML 解析，这里分为两种情况；</p>\n<ul>\n<li>使用 HTTP/1.x 协议，资源是串型加载的，所以浏览通过开启多个连接进行并行加载，但是开启多个连接的数据量有限制4-8个左右，如果一个页面图片多（还包含其他资源）那么会阻塞图片的下载</li>\n<li>使用 HTTP/2 全部图片进行异步加载不会解析执行</li>\n</ul>\n</li>\n<li><p>如果遇到 script 节点，情况比较复杂，我们分情况详细讨论</p>\n<ol>\n<li><p>普通 script</p>\n<p>因为 js 有可能会修改 DOM。比如说 document.write，所以浏览器遇到 js 文件时，会停止后面的 HTML 解析，等待 js 执行完后，再去解析后面 HTML 文档</p>\n<ul>\n<li><p>如果此时有未加载完的样式文件，浏览器不会构建渲染树，屏幕会一直显示空白。HTML 和 CSS 都是阻塞渲染资源，应该尽可能早地下载</p>\n</li>\n<li><p>如果已经加载完样式文件，则会构建渲染树，先渲染已解析完的 DOM（如果有的话）</p>\n</li>\n<li><p>为了减缓渲染被阻塞的情况，现代浏览器都是用了猜测预加载（specculative loading)，当渲染被阻塞的时候，它会做以下一些事：</p>\n<ul>\n<li>轻量级的 HTML （或 CSS）扫描器（scanner）继续在文档中扫描</li>\n<li>查找哪些将来可能能够用到的资源文件的 URL</li>\n<li>在渲染器使用它们之间将其下载下来</li>\n<li>也可以利用 http/2 推送功能将资源先从服务器推送下来</li>\n</ul>\n<p>这也就解析为了什么 css 要放在页面顶部，而 js 放在底部</p>\n</li>\n</ul>\n</li>\n<li><p>defer script</p>\n<ul>\n<li>不阻止解析 HTML，并行下载 js</li>\n<li>即使下载完文件仍然继续解析 HTML</li>\n<li>按照页面中出现的顺序，在其他同步脚本执行后，DOMContendLoaded 事件前依次执行 defer 文件</li>\n</ul>\n</li>\n<li><p>async script</p>\n<ul>\n<li>不阻止解析 HTML，并行下载 js 文件</li>\n<li>当脚本下载完毕后，立即解析执行，async 的执行顺序不确定，执行阶段也不确定</li>\n<li>因为顺序无关，所以很适合像 Google Analytics 这样的无依赖脚本</li>\n<li>因为 js 执行线程和 GUI 渲染线程互斥，所以在 js 执行的时候都会冻结 GUI 渲染线程，GUI 更新会被保存到一个队列中等到引擎线程空闲时立即被执行。</li>\n<li>因为浏览器不知道 js 执行会不会改变 dom，所以即使是 async 的执行也会阻塞 dom 解析</li>\n</ul>\n</li>\n<li><p>其他</p>\n<ul>\n<li>如果 script 无 src 属性，则 defer，async 会被忽略</li>\n<li>动态添加的 script 标签隐含 async 属性</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"加快-HTML-页面加载速度策略\"><a href=\"#加快-HTML-页面加载速度策略\" class=\"headerlink\" title=\"加快 HTML 页面加载速度策略\"></a>加快 HTML 页面加载速度策略</h3><hr>\n<ol>\n<li>压缩压缩压缩，html，css，js，图片压缩</li>\n<li>升级升级升级，升级 HTTP/2</li>\n<li>使用 CDN </li>\n</ol>\n","categories":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/categories/文件加载顺序.json"}],"tags":[{"name":"文件加载顺序","slug":"文件加载顺序","count":1,"path":"api/tags/文件加载顺序.json"}]}