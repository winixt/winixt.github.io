{"title":"理解apply,call,bind","slug":"理解apply,call,bind","date":"2019-03-03T16:00:00.000Z","updated":"2019-03-04T05:37:34.724Z","comments":true,"path":"api/articles/理解apply,call,bind.json","photos":[],"link":"","excerpt":"之前对 js 的 apply、call、bind 方法零零散散有过一些了解，知道它们可以改变函数运行时的 this。今天来深入理解一番。其实很多人心想不就是绑定 this 嘛，有什么的。好，那么这句代码何解？1<br>Function.apply.bind(Math.max, null);<br>","covers":null,"content":"<p>之前对 js 的 apply、call、bind 方法零零散散有过一些了解，知道它们可以改变函数运行时的 this。今天来深入理解一番。</p>\n<p>其实很多人心想不就是绑定 this 嘛，有什么的。</p>\n<p>好，那么这句代码何解？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function.apply.bind(Math.max, null);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>知道呀，不就是 xxxx 嘛</p>\n<p>那么这句呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function.bind.apply(fn, arguments)</span><br></pre></td></tr></table></figure>\n<p>知道的就可以直接关闭页面了，还不了解的请往下看    </p>\n<h3 id=\"首先什么是-this\"><a href=\"#首先什么是-this\" class=\"headerlink\" title=\"首先什么是 this\"></a>首先什么是 this</h3><hr>\n<p>函数被调用时，会创建一个执行上下文。执行上下文中会包含函数的参数、调用方法等信息。this 就是其中的一个属性。相当于一个指针，至于指向什么，完全取决于函数在哪里被调用。</p>\n<p>好像有点晕，我们通过代码来分析一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  index: <span class=\"number\">1</span>,</span><br><span class=\"line\">  func: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 输出什么？</span></span><br><span class=\"line\"><span class=\"comment\">* 不用想了，没什么陷阱</span></span><br><span class=\"line\"><span class=\"comment\">* 1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">obj.func(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> funcCp = obj.func;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 输出什么？</span></span><br><span class=\"line\"><span class=\"comment\">* 也没什么难度</span></span><br><span class=\"line\"><span class=\"comment\">* undefined </span></span><br><span class=\"line\"><span class=\"comment\">* this 指向全局了嘛</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">funcCp();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">fun</span>) </span>&#123;</span><br><span class=\"line\">  fun();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 输出什么？</span></span><br><span class=\"line\"><span class=\"comment\">* 很多人可能曾经就犯过这个错误了，以为是 1，其实还是</span></span><br><span class=\"line\"><span class=\"comment\">* undefined </span></span><br><span class=\"line\"><span class=\"comment\">* obj.func 对 fun 进行了隐式赋值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">bar(obj.func);</span><br></pre></td></tr></table></figure>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><hr>\n<p>apply <strong>调用一个函数</strong>，第一个参数指定运行时 this，第二参数接受一个包含多个参数的数组。（这是与 call 方法的区别)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index + x);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  index: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func.apply(obj); <span class=\"comment\">// 1</span></span><br><span class=\"line\">func.apply(obj, <span class=\"number\">2</span>); <span class=\"comment\">// 报错，第二个参数（如果有）必须为数组</span></span><br><span class=\"line\">func.apply(obj, [<span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br><span class=\"line\">func.apply(obj, [<span class=\"number\">2</span>], <span class=\"number\">3</span>); <span class=\"comment\">// 3，后面的参数将会忽略</span></span><br></pre></td></tr></table></figure>\n<p>apply 经常用于“展开”数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>此种做法 es6 称为解构:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"手动实现-apply\"><a href=\"#手动实现-apply\" class=\"headerlink\" title=\"手动实现 apply\"></a>手动实现 apply</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.apply) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Function</span>.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'use apply must be a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx = ctx || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    ctx.fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>])) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'apply second argument must be a array'</span>);</span><br><span class=\"line\">      result = ctx.fn(...arguments);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = ctx.fn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ctx.fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><hr>\n<p>call <strong>调用一个函数</strong>，第一个参数指定运行时的 this，其余参数指定参数列表。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index + x);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  index: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func.call(obj); <span class=\"comment\">// 1</span></span><br><span class=\"line\">func.call(obj, <span class=\"number\">2</span>); <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"手动实现-call\"><a href=\"#手动实现-call\" class=\"headerlink\" title=\"手动实现 call\"></a>手动实现 call</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.call) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Function</span>.prototype.call = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'use call must be a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context = context | <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    context._fn = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = context.fn(...args);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context._fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><hr>\n<p>bind <strong>创建一个新的函数</strong>，第一个参数指定运行时的 this，其余参数置于实参之前。可以理解为对 apply 方法的封装调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">'number'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index + x + y);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  index: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newFunc1 = func.bind(obj);</span><br><span class=\"line\">newFunc1(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newFunc2 = func.bind(obj, <span class=\"number\">2</span>);</span><br><span class=\"line\">newFunc2(<span class=\"number\">3</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>bind 经常用来做柯里化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> ------ <span class=\"subst\">$&#123;y&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> k = func.bind(<span class=\"literal\">null</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">k(<span class=\"number\">2</span>); <span class=\"comment\">// 1 ------ 2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-call-实现-bind\"><a href=\"#使用-call-实现-bind\" class=\"headerlink\" title=\"使用 call 实现 bind\"></a>使用 call 实现 bind</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.bind) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'use bind must be a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 因为返回的一个函数，可以用 new，所以需要判断</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _this(...args, ...arguments);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _this.call(context, ...args, ...arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多次-bind-只有第一次生效\"><a href=\"#多次-bind-只有第一次生效\" class=\"headerlink\" title=\"多次 bind 只有第一次生效\"></a>多次 bind 只有第一次生效</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun.bind(obj1).bind(obj2)() <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"comment\">// 第二次绑定，相当于绑定绑定后的结果。第一次 fun 的绑定没有影响</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boo</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn.call(o, ...arguments); </span><br><span class=\"line\">  &#125;.call(o2, ...arguments);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"进化\"><a href=\"#进化\" class=\"headerlink\" title=\"进化\"></a>进化</h3><hr>\n<p>那么下面语句将会输出什么呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 聪明的你可能已经想到了，答案为：4</span></span><br><span class=\"line\"><span class=\"comment\">// apply 指定 Function.call 的执行上下文为 fn，并传入参数 2。</span></span><br><span class=\"line\"><span class=\"comment\">// 根据 call 语法规则，call 调用 fn，并传入参数 2</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.call.apply(fn, [<span class=\"literal\">null</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错，记住 apply 的第二个参数必须为 数组</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.apply.apply(fn, [<span class=\"literal\">null</span>, <span class=\"number\">2</span>]); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过, 输出：4</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.apply.apply(fn, [<span class=\"literal\">null</span>, [<span class=\"number\">2</span>]]); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*+++++++++++++++++++++++++++++++++++++++++++++++++++++*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Function</span>.apply.bind(fn, <span class=\"literal\">null</span>, [<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意，bind 的作用时生成一个新的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 给 Function.apply 绑定一个 fn 的执行上下文，并将参数 2 传入 fn</span></span><br><span class=\"line\">foo(); <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*+++++++++++++++++++++++++++++++++++++++++++++++++++++*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"built_in\">Function</span>.bind.apply(fn, [fn, <span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意，bind 的作用时生成一个新的函数</span></span><br><span class=\"line\">bar(); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n","categories":[{"name":"js","slug":"js","count":2,"path":"api/categories/js.json"}],"tags":[{"name":"apply","slug":"apply","count":1,"path":"api/tags/apply.json"},{"name":"call","slug":"call","count":1,"path":"api/tags/call.json"},{"name":"bind","slug":"bind","count":1,"path":"api/tags/bind.json"}]}