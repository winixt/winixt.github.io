{"title":"react16 系列（1）","slug":"react16 系列（1） ","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/react16 系列（1） .json","photos":[],"link":"","excerpt":"前言近来一直忙其他事，没怎么和 react 打过招呼了，转眼 react 已经跟新到了 16.2 版本，并且带来了很多重要的变更:","covers":["https://ws2.sinaimg.cn/large/006tKfTcly1fnxip7ozvqj30ui0a8q5d.jpg","https://ws1.sinaimg.cn/large/006tKfTcly1fnxiwggv1hj30zk0i8n1r.jpg","https://ws3.sinaimg.cn/large/006tKfTcly1fnxlwcb6jtj314a0d6n13.jpg","https://ws1.sinaimg.cn/large/006tKfTcly1fnxp1g0m4lj30la01cdg6.jpg","https://ws3.sinaimg.cn/large/006tKfTcly1fnxphwax6mj31kw0s2469.jpg"],"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>近来一直忙其他事，没怎么和 react 打过招呼了，转眼 react 已经跟新到了 16.2 版本，并且带来了很多重要的变更:</p>\n<a id=\"more\"></a>\n<ul>\n<li>render 可以返回字符串（String）和片段（fragments)</li>\n<li>Error Boundary 处理错误组件</li>\n<li>Portals 将组件渲染到当前组件树外</li>\n<li>支持自定义 DOM 属性</li>\n<li>setState 传入 null 时不会出发更新</li>\n<li>减少文件大小</li>\n<li>优化服务器端渲染方式</li>\n</ul>\n<h3 id=\"render-可以返回字符串（String）和片段（fragments\"><a href=\"#render-可以返回字符串（String）和片段（fragments\" class=\"headerlink\" title=\"render 可以返回字符串（String）和片段（fragments)\"></a>render 可以返回字符串（String）和片段（fragments)</h3><hr>\n<p>现在的 render 方法可以返回字符串，非常简单：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">String</span> = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcly1fnxip7ozvqj30ui0a8q5d.jpg\" alt=\"图片\"></p>\n<p>render 返回片段，是个数组类型，html 元素需要带上 key，（官方说可能之后不用再写 key 了，哇赞成的举个手）👋：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> FragmentDemo1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"string\">\"Some Text.\"</span>,</span><br><span class=\"line\">    &lt;h2 key=<span class=\"string\">\"heading-1\"</span>&gt;A heading&lt;<span class=\"regexp\">/h2&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">    \"More text.\",</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h2 key=\"heading-2\"&gt;Another heading&lt;/</span>h2&gt;,</span><br><span class=\"line\">    <span class=\"string\">\"Even more text.\"</span></span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>react16.2 新出了一个语法糖 Fragment，官方定义如下：</p>\n<blockquote>\n<p>Fragments look like empty JSX tags. They let you group a list of children without adding extra nodes to the DOM：</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;ChildA /&gt;</span><br><span class=\"line\">      &lt;ChildB /&gt;</span><br><span class=\"line\">      &lt;ChildC /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>也就是说相当于一个空的 jsx 标签，具体用法：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> FragmentDemo2 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      Some text.</span><br><span class=\"line\">      &lt;h3&gt;A heading &lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      More text.</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;h1&gt;Another heading&lt;/</span>h1&gt;</span><br><span class=\"line\">      Even more text.</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1fnxiwggv1hj30zk0i8n1r.jpg\" alt=\"图片\"></p>\n<h3 id=\"Error-Boundary-处理错误组件\"><a href=\"#Error-Boundary-处理错误组件\" class=\"headerlink\" title=\"Error Boundary 处理错误组件\"></a>Error Boundary 处理错误组件</h3><hr>\n<p>在 UI 中的一个 javascript 错误，不应该让整个应用崩溃，像皮球一样，搓个洞就炸了。</p>\n<p>为解决这个问题，react16 提供了一新的概念 Error Boundary：</p>\n<blockquote>\n<p>可以捕获它的子组件树的任何 javascript 错，log 错误信息，并用一个 component 取代奔溃的组件树。包括 rendering 时的错误，生命周期中的错误，以及子组件中的 constructor 中错误。如果  Error Boundary 处理失败，会上浮到离它最近的一个 Error Boundary 上，相似于 catch {}</p>\n<p>注：是只能捕获子组件树，不能捕获它自身的错误。</p>\n</blockquote>\n<p>怎么用呢？只需要在一个 class Component 加上 componentDidCatch，这个组件就变成 Error Boundary Component 了</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorBoundary</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidCatch(error, info) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Dispay fallback UI</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// You can also log the error to an error reporting servics</span></span><br><span class=\"line\">    <span class=\"comment\">// logErrorToMyServics(error, info);</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error, info);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.hasError) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Something went wrong.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：也只有 class Compoent 才能变成 Error Boundary Component</p>\n<p>然后可以用于普通组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ErrorBoundary&gt;</span><br><span class=\"line\">  &lt;<span class=\"built_in\">String</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ErrorBoundary&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">String</span> = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'哇哇哇，出错啦出错啦'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fnxlwcb6jtj314a0d6n13.jpg\" alt=\"图片\"></p>\n<p>现在我们了解了 Error Boundary 的作用及其用法，那么它可以用在哪里呢？</p>\n<p>这主要取决于你需要做多细粒度的控制。可以用于包裹顶层 route component，当应用发生错误的时候现实 “出现了某种类型的错误” 给用户。或者专门控制一些小的子组件，防止子组件奔溃的时候影响整个应用。</p>\n<p>注：如果没使用 Error Boundary，出现错误，react 会卸载整个组件树，详细原因看<a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"Portals-将组件渲染到当前组件树外\"><a href=\"#Portals-将组件渲染到当前组件树外\" class=\"headerlink\" title=\"Portals 将组件渲染到当前组件树外\"></a>Portals 将组件渲染到当前组件树外</h3><hr>\n<p>使用 react 的时候，如果我想在父组件为 overflow: hidden 的情况下把子组件显示出来怎么办？例如 html5.2 新出的 dialog，或者hovercards、tooltips</p>\n<p>Portals 就是为解决这种问题而开发出来，它可以将一个组件渲染到其他 DOM 节点去，而不在当前的父节点下，用法如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// React does *not* create a new div. It renders the children into `domNode`.</span></span><br><span class=\"line\">  <span class=\"comment\">// `domNode` is any valid DOM node, regardless of its location in the DOM.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ReactDOM.createPortal(</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.children,</span><br><span class=\"line\">    domNode,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：虽然 Portal 组件渲染到其他 DOM 节点下了，但是 Portal 组件的其他方面的行为还是和正常的 react child 一样，Portal 组件上的事件还是传递到原来的父组件，这和 react 的事件系统设计有关，<a href=\"https://reactjs.org/docs/portals.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<h3 id=\"支持自定义-DOM-属性\"><a href=\"#支持自定义-DOM-属性\" class=\"headerlink\" title=\"支持自定义 DOM 属性\"></a>支持自定义 DOM 属性</h3><hr>\n<p>听说 react16 文件减小，是不是很开心😄？</p>\n<p>但是这和我们的自定义 DOM 属性有什么关系呢？</p>\n<p>因为 react 不用再搞一个属性白名单了，直接把无法识别的 html 和 svg 属性传递给 DOM：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div nirenshiwoma=<span class=\"string\">\"不认识你这个属性耶\"</span>&gt;我带了新属性&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1fnxp1g0m4lj30la01cdg6.jpg\" alt=\"图片\"></p>\n<h3 id=\"setState-传入-null-时不会出发更新\"><a href=\"#setState-传入-null-时不会出发更新\" class=\"headerlink\" title=\"setState 传入 null 时不会出发更新\"></a>setState 传入 null 时不会出发更新</h3><hr>\n<p>setState react 官方描述如下：</p>\n<ul>\n<li>Calling <code>setState</code> with null no longer triggers an update. This allows you to decide in an updater function if you want to re-render.</li>\n<li>Calling <code>setState</code> directly in render always causes an update. This was not previously the case. Regardless, you should not be calling setState from render.</li>\n<li><code>setState</code> callbacks (second argument) now fire immediately after <code>componentDidMount</code> / <code>componentDidUpdate</code> instead of after all components have rendered.</li>\n</ul>\n<p>这里点击 update 按钮不会触发 render:</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fnxphwax6mj31kw0s2469.jpg\" alt=\"图片\"></p>\n<h3 id=\"减少文件大小\"><a href=\"#减少文件大小\" class=\"headerlink\" title=\"减少文件大小\"></a>减少文件大小</h3><hr>\n<p>什么？增加了这么多功能，文件还减小了？【成龙脸】</p>\n<p>没错，你没听错，如 Facebook 工程师所说：我们对 react 进行了重写</p>\n<p>赞，喜欢的就是这范👍</p>\n<blockquote>\n<p><code>react</code>包的大小从20.7kb下降到5.3kb（gzip压缩后大小从6.9kb下降到2.2kb）。</p>\n<p><code>react-dom</code>包的大小从141kb下降到103.7kb（gzip压缩后大小从42.9kb下降到103.7kb）。</p>\n<p><code>react</code>+<code>react-dom</code>包总大小从161.7kb下降到109kb（gzip压缩后大小从49.8kb下降到34.8kb）。</p>\n</blockquote>\n<h3 id=\"优化服务器端渲染方式\"><a href=\"#优化服务器端渲染方式\" class=\"headerlink\" title=\"优化服务器端渲染方式\"></a>优化服务器端渲染方式</h3><hr>\n<p>这个是大话题，请听下回【react16 系列（2）】分析😊</p>\n","categories":[{"name":"react","slug":"react","count":3,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"},{"name":"react16","slug":"react16","count":1,"path":"api/tags/react16.json"}]}