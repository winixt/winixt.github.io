{"title":"聊一聊 HTTP","slug":"http","date":"2019-02-24T04:20:08.111Z","updated":"2019-02-24T04:20:08.111Z","comments":true,"path":"api/articles/http.json","photos":[],"link":"","excerpt":"下文中的CORS内容大部分摘自 HTTP访问控制（CORS），这里进行了部分更改HTTP 简介HTTP 超文本传输协议(Hypertext Transper Protocol)，应用层协议。基于一种请求/响应的工作模式。即当客户端与服务器连接后，客户端发送请求，服务器给出响应。","covers":["https://ws3.sinaimg.cn/large/006tKfTcgy1fnpi3nsl4jj30eh0fdgor.jpg"],"content":"<blockquote>\n<p>下文中的CORS内容大部分摘自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">HTTP访问控制（CORS）</a>，这里进行了部分更改</p>\n</blockquote>\n<h3 id=\"HTTP-简介\"><a href=\"#HTTP-简介\" class=\"headerlink\" title=\"HTTP 简介\"></a>HTTP 简介</h3><p>HTTP 超文本传输协议(Hypertext Transper Protocol)，应用层协议。基于一种请求/响应的工作模式。即当客户端与服务器连接后，客户端发送请求，服务器给出响应。</p>\n<a id=\"more\"></a>\n<p>接下来我们从常用请求方法、HTTP Headers、响应状态码、跨资源共享 4 个方面进行分析。</p>\n<h3 id=\"常用请求方法\"><a href=\"#常用请求方法\" class=\"headerlink\" title=\"常用请求方法\"></a>常用请求方法</h3><p>虽然 HTTP 规范定义一系列方法，但是常用的无非 GET、POST、HEAD、CONNECT；</p>\n<ul>\n<li><p>GET</p>\n<p>GET 方法请求一个指定资源的表示方式。使用 GET 方法应该只用于获取数据</p>\n</li>\n<li><p>POST</p>\n<p>POST 方法用于将实体提交给指定的资源，通常导致状态或服务器上的副作用的更改</p>\n</li>\n<li><p>HEAD </p>\n<p>HEAD 方法请求一个与 GET 请求的响应相同的相应，但没有响应体。此方法经常用于测试超文本连接的有效性、可访问性、和最近的改变</p>\n</li>\n<li><p>CONNECT</p>\n<p>CONNECT 方法建立一个到由目标资源标识的服务器的隧道</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"HTTP-Headers\"><a href=\"#HTTP-Headers\" class=\"headerlink\" title=\"HTTP Headers\"></a>HTTP Headers</h3><p>HTTP 规范也定义了一系列 Headers 信息，但是大部分不需要我们开发人员关心，浏览器已经帮我们实现号了。我们来看看几个比较重要的 Headers 信息。</p>\n<h4 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h4><p>在响应中，Content-Type标头告诉客户端实际返回的内容的内容类型，如：</p>\n<blockquote>\n<p>Content-Type: text/html; charset=utf-8</p>\n<p>Content-Type: multipart/form-data; boundary=something</p>\n</blockquote>\n<p>常见类型有：</p>\n<ol>\n<li>text/html</li>\n<li>text/plain</li>\n<li>text/css</li>\n<li>text/javascript</li>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>application/json</li>\n<li>application/xml</li>\n</ol>\n<p>指令：</p>\n<p><code>media-type</code></p>\n<p>资源或数据的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> 。</p>\n<p>charset</p>\n<p>字符编码标准。</p>\n<p>boundary</p>\n<p>对于多部分实体，boundary 是必需的，其包括来自一组字符的1到70个字符，已知通过电子邮件网关是非常健壮的，而不是以空白结尾。它用于封装消息的多个部分的边界。</p>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p>\n<p>Cookie 主要用于以下三个方面：</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其他需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如分析用户行为等）</li>\n</ul>\n<h4 id=\"跨资源请求相关-Header\"><a href=\"#跨资源请求相关-Header\" class=\"headerlink\" title=\"跨资源请求相关 Header\"></a>跨资源请求相关 Header</h4><p>Access-Control-Allow-Origin 等信息，具体看下文[跨资源共享模块]</p>\n<hr>\n<h3 id=\"响应状态码\"><a href=\"#响应状态码\" class=\"headerlink\" title=\"响应状态码\"></a>响应状态码</h3><h4 id=\"状态码分为5大类：\"><a href=\"#状态码分为5大类：\" class=\"headerlink\" title=\"状态码分为5大类：\"></a>状态码分为5大类：</h4><ul>\n<li>1XX（信息描述）：接受的请求正在处理</li>\n<li>2XX（成功状态）：请求正常处理完毕。其中 206 表示请求部分内容成功</li>\n<li>3XX（重定向状态）：服务器要求客户端重定向</li>\n<li>4XX （客户端错误）：服务器无法处理请求</li>\n<li>5XX （服务器错误）：服务器处理请求出错</li>\n</ul>\n<h4 id=\"常用状态码\"><a href=\"#常用状态码\" class=\"headerlink\" title=\"常用状态码\"></a>常用状态码</h4><ul>\n<li>200: 客户端请求成功</li>\n<li>301: 资源永久重定向</li>\n<li>302: 资源暂时重定向</li>\n<li>304: 请求资源未改动（不会返回任何资源，客户端利用本地缓存资源）</li>\n<li>400: 客户端请求参数错误</li>\n<li>401: 请求未授权</li>\n<li>403: 服务器拒绝接受服务</li>\n<li>404：请求资源不存在</li>\n<li>500: 服务器发生不可预期错误</li>\n<li>503: 服务器当前不能处理客户端请求</li>\n</ul>\n<hr>\n<h3 id=\"跨资源访问（CORS）\"><a href=\"#跨资源访问（CORS）\" class=\"headerlink\" title=\"跨资源访问（CORS）\"></a>跨资源访问（CORS）</h3><p>当一个资源从与该资源本身所在的服务器不同域或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权访问哪些资源。</p>\n<p>为了防止 CSRF 跨站攻击，浏览器对跨域请求做了限制，即跨资源共享（CORS）机制，具体如下：</p>\n<ol start=\"0\">\n<li>简单请求（不会引起其他副作用的请求），直接发起请求，如果服务器拒绝跨域，浏览器会对请求结果进行拦截，否则通过请求。</li>\n</ol>\n<ol>\n<li>对于可能对服务器产生副作用的 HTTP 请求方法，浏览器必须首先使用 OPTIONS 方法发起一个预测请求，从而获知服务端是否允许跨域请求，服务器确认允许之后，才发起实际的HTTP 请求。在预测请求的返回中，服务端也可以通知客户端，是否需要携带身份凭证。</li>\n<li>有些浏览器不允许从 HTTPS 的域跨域访问 HTTP，比如 Chrome 和 Firefox，这些请求还为发起就被拦截。</li>\n</ol>\n<h4 id=\"一个源的定义\"><a href=\"#一个源的定义\" class=\"headerlink\" title=\"一个源的定义\"></a>一个源的定义</h4><p>如果协议、端口和域名对于当前访问页面是相同的，则两个页面同源。</p>\n<p>例如当前访问页面为：<a href=\"http://www.example.com/test\" target=\"_blank\" rel=\"noopener\">http://www.example.com/test</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">URL</th>\n<th style=\"text-align:center\">结果</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.example.com/test1\" target=\"_blank\" rel=\"noopener\">http://www.example.com/test1</a></td>\n<td style=\"text-align:center\">成功</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.example.com/test1\" target=\"_blank\" rel=\"noopener\">https://www.example.com/test1</a></td>\n<td style=\"text-align:center\">失败</td>\n<td>协议不同</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.example.com:81/test\" target=\"_blank\" rel=\"noopener\">http://www.example.com:81/test</a></td>\n<td style=\"text-align:center\">失败</td>\n<td>端口不同</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://news.example.com/test\" target=\"_blank\" rel=\"noopener\">http://news.example.com/test</a></td>\n<td style=\"text-align:center\">失败</td>\n<td>不同域名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p> <strong>IE例外</strong> </p>\n<ul>\n<li>授信范围：两个相互之间高度互信的域名，如公司域名，不遵守同源策略的限制。</li>\n<li>端口：IE 未将端口号加入到同源策略的组成成分之中。</li>\n</ul>\n<h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h4><p>满足下列条件的请求，可被视为“简单请求”：</p>\n<ul>\n<li>下列方法之一<ul>\n<li>GET</li>\n<li>HEAD</li>\n<li>POST</li>\n</ul>\n</li>\n<li>Fetch 规范定义<a href=\"https://fetch.spec.whatwg.org/#cors-safelisted-request-header\" target=\"_blank\" rel=\"noopener\">对 CORS 安全的首部字段集合</a>，不得人为设置该集合之外的其他首部字段，该集合为：<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type(有额外限制，参见下文)</li>\n<li>DPR</li>\n<li>Downlink</li>\n<li>Save-Data</li>\n<li>Viewport-Width</li>\n<li>Width</li>\n</ul>\n</li>\n<li>Content-Type 的值仅限于下列三者之一：<ul>\n<li>text/plain</li>\n<li>multipart/form-data</li>\n<li>application/x-www-form-urlencoded</li>\n</ul>\n</li>\n</ul>\n<p>\u000b列如下面这个请求，站点<a href=\"http://bar.other\" target=\"_blank\" rel=\"noopener\">http://bar.other</a> 访问站点 <a href=\"http://foo.example\" target=\"_blank\" rel=\"noopener\">http://foo.example</a> 资源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /resources/public-data/ HTTP/1.1</span><br><span class=\"line\">Host: bar.other</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: en-us,en;q=0.5</span><br><span class=\"line\">Accept-Encoding: gzip,deflate</span><br><span class=\"line\">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Referer: http://foo.example/examples/access-control/simpleXSInvocation.html</span><br><span class=\"line\">Origin: http://foo.example</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 01 Dec 2008 00:23:53 GMT</span><br><span class=\"line\">Server: Apache/2.0.61 </span><br><span class=\"line\">Access-Control-Allow-Origin: *</span><br><span class=\"line\">Keep-Alive: timeout=2, max=100</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Content-Type: application/xml</span><br></pre></td></tr></table></figure>\n<p>这里有两个比较特殊的首部字段：</p>\n<ol>\n<li><p>Origin: 在第 10 行，表明该请求来源于 <a href=\"http://foo.example\" target=\"_blank\" rel=\"noopener\">http://foo.example</a></p>\n</li>\n<li><p>Access-Control-Allow-Origin: 在第16行，值为：*，表明该资源可以被任意的域访问，如果服务端仅允许来自 <a href=\"http://foo.example\" target=\"_blank\" rel=\"noopener\">http://foo.example</a> 的访问，首部字段应该如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://foo.example</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"需要检测的请求\"><a href=\"#需要检测的请求\" class=\"headerlink\" title=\"需要检测的请求\"></a>需要检测的请求</h4><p>如前文所述，需要检测的请求，需要先发起一个 OPTIONS 预检请求到服务器， 满足下述任意条件时，应首先发起预检请求：</p>\n<ul>\n<li>使用了下列任一方法<ul>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n<li>PATCH</li>\n</ul>\n</li>\n<li>人为设置了<a href=\"https://fetch.spec.whatwg.org/#cors-safelisted-request-header\" target=\"_blank\" rel=\"noopener\"> CORS 安全的首部字段集合</a>之外的其他首部字段，该集合为：<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type(有额外限制，参见下文)</li>\n<li>DPR</li>\n<li>Downlink</li>\n<li>Save-Data</li>\n<li>Viewport-Width</li>\n<li>Width</li>\n</ul>\n</li>\n<li>Content-Type 的值不属于下列之一：<ul>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text/plain</li>\n</ul>\n</li>\n</ul>\n<p>如下是一个需要执行预检请求的 HTTP 请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invocation = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'http://bar.other/resources/post-here/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;?xml version=\"1.0\"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callOtherDomain</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(invocation)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      invocation.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      invocation.setRequestHeader(<span class=\"string\">'X-PINGOTHER'</span>, <span class=\"string\">'pingpong'</span>);</span><br><span class=\"line\">      invocation.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/xml'</span>);</span><br><span class=\"line\">      invocation.onreadystatechange = handler;</span><br><span class=\"line\">      invocation.send(body); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码使用 POST 请发送一个 XML 文档，包含自定义首部 X-PINGOTHER: pingpong。另外请求的 Content-Type 为 application/xml。因此，该请求需要首先发起”预检请求”。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcgy1fnpi3nsl4jj30eh0fdgor.jpg\" alt=\"client-server\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /resources/post-here/ HTTP/1.1</span><br><span class=\"line\">Host: bar.other</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: en-us,en;q=0.5</span><br><span class=\"line\">Accept-Encoding: gzip,deflate</span><br><span class=\"line\">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Origin: http://foo.example</span><br><span class=\"line\">Access-Control-Request-Method: POST</span><br><span class=\"line\">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class=\"line\">Server: Apache/2.0.61 (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http://foo.example</span><br><span class=\"line\">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class=\"line\">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br><span class=\"line\">Vary: Accept-Encoding, Origin</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\">Keep-Alive: timeout=2, max=100</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n<p>预检请求完成后，发送实际请求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /resources/post-here/ HTTP/1.1</span><br><span class=\"line\">Host: bar.other</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: en-us,en;q=0.5</span><br><span class=\"line\">Accept-Encoding: gzip,deflate</span><br><span class=\"line\">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">X-PINGOTHER: pingpong</span><br><span class=\"line\">Content-Type: text/xml; charset=UTF-8</span><br><span class=\"line\">Referer: http://foo.example/examples/preflightInvocation.html</span><br><span class=\"line\">Content-Length: 55</span><br><span class=\"line\">Origin: http://foo.example</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 01 Dec 2008 01:15:40 GMT</span><br><span class=\"line\">Server: Apache/2.0.61 (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http://foo.example</span><br><span class=\"line\">Vary: Accept-Encoding, Origin</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: 235</span><br><span class=\"line\">Keep-Alive: timeout=2, max=99</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n<p>从上面的报文中我们看到，第1-12 行发送了一个 OPTIONS 方法的“预检请求”。OPTIONS 是 HTTP/1.1 的方法，用以从服务器获取更多的信息，该方法不会对服务器资源产生影响。预检请求携带了下面连个首部字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Request-Method: POST</span><br><span class=\"line\">Access-Control-Request-Headers: X-PINGOTHER</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Access-Control-Request-Method 告知服务器，实际使用的请求方法，在这里是 POST。</li>\n<li>Access-Control-Request-Headers 告知服务器，实际请求携带的自定义首部字段，在这里是 X-PINGOTHER 和 Content-Type。</li>\n</ol>\n<p>服务器据此决定，该请求是否被允许。</p>\n<p>第 14-16 行为预检请求的响应， 表明服务器将接受后续的实际请求。重点看 17-19 行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://foo.example</span><br><span class=\"line\">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class=\"line\">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class=\"line\">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Access-Control-Allow-Methods：表示服务器允许客户端使用的请求方法，在这里是 POST、GET、OPTIONS。</li>\n<li>Access-Control-Allow-Headers：表示服务器允许请求中携带的自定义字段，在这里是X-PINGOTHER, Content-Type。与 Access-Control-Allow-Methods 一样，Access-Control-Allow-Headers 的值为英文逗号分隔的列表。</li>\n<li>Access-Control-Max-Age：表示该响应的有效时间为 86400 秒，也就是 24 小时。在有效时间内，浏览器无须为同一请求再次发起预检请求。请注意，浏览器维护了一个最大的有效时间，如果该首部字段的超过了最大的有效时间，将不会生效。</li>\n</ol>\n<h4 id=\"附带身份凭证的请求\"><a href=\"#附带身份凭证的请求\" class=\"headerlink\" title=\"附带身份凭证的请求\"></a>附带身份凭证的请求</h4><p>Fetch 与 CORS 的一个有趣的特性是，可以基于 HTTP cookies 和 HTTP 认证信息发送身份凭证。一般而言，对于跨域 XMLHttpRequest 或 Fetch 请求，浏览器不会发送身份凭证信息。如果要发送凭证信息，需要设置 XMLHttpRequest 的某个特殊标识位。</p>\n<p>如下，<a href=\"http://foo.example\" target=\"_blank\" rel=\"noopener\">http://foo.example</a> 的某脚本 向 <a href=\"http://bar.other\" target=\"_blank\" rel=\"noopener\">http://bar.other</a> 发起一个 GET 请求，并设置 Cookie:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var invocation = new XMLHttpRequest();</span><br><span class=\"line\">var url = &apos;http://bar.other/resources/credentialed-content/&apos;;</span><br><span class=\"line\">    </span><br><span class=\"line\">function callOtherDomain()&#123;</span><br><span class=\"line\">  if(invocation) &#123;</span><br><span class=\"line\">    invocation.open(&apos;GET&apos;, url, true);</span><br><span class=\"line\">    invocation.withCredentials = true;</span><br><span class=\"line\">    invocation.onreadystatechange = handler;</span><br><span class=\"line\">    invocation.send(); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第 7 行将 XMLHttpRequest 的 withCredentials 的标志设置为 true，从而向服务器发送 Cookie。因为这是一个简单的 GET 请求，所以浏览器不会发起预检请求。但是，如果服务器的响应中未携带 Access-Control-Allow-Credentials: true，浏览器将不会把响应内容返回给请求的发送者。</p>\n<p>Fetch 的特殊标志如下：credentials: ‘include’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let requestConfig = &#123;</span><br><span class=\"line\">    credentials: &apos;include&apos;,</span><br><span class=\"line\">    method: type,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &apos;Accept&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">      &apos;Content-Type&apos; : &apos;application/json&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mode: &quot;cors&quot;,</span><br><span class=\"line\">    cache: &quot;force-cache&quot;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"附带身份凭证的请求与通配符\"><a href=\"#附带身份凭证的请求与通配符\" class=\"headerlink\" title=\"附带身份凭证的请求与通配符\"></a>附带身份凭证的请求与通配符</h4><p>对于附带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为\u0010”*”。</p>\n<p>这是因为请求的首部中携带了 Cookie 的信息，如果  Access-Control-Allow-Origin 的值为 “*”，请求将会失败。</p>\n<h4 id=\"form-表单的跨域问题\"><a href=\"#form-表单的跨域问题\" class=\"headerlink\" title=\"form 表单的跨域问题\"></a>form 表单的跨域问题</h4><p>当 form 表单跨域提交数据的时候，原页面会跳转到新页面（这样原页面脚本便无法获取新页面的内容，浏览器因此认为是安全的），相当于 a 标签跳转一样，因而会带上缓存在本地的新页面的 cookie，并且可以提交成功。（这也是 csrf 能攻击成功，而不会被同源策略限制的原因）</p>\n<p>但是因为不同源之间的跳转，request 也会带上 origin，refer等字段，可以依据这些字段限制不可信的跨域访问，这些涉及到 csrf 防御的问题了，在另一篇 csrf 防御和攻击有详细说明。</p>\n<h3 id=\"HTTP-响应首部字段\"><a href=\"#HTTP-响应首部字段\" class=\"headerlink\" title=\"HTTP 响应首部字段\"></a>HTTP 响应首部字段</h3><p>本节列出了规范所定义的响应首部字段。上一小节中，我们已经看到了这些首部字段在实际场景中是如何工作的。</p>\n<h4 id=\"Access-Control-Allow-Origin\"><a href=\"#Access-Control-Allow-Origin\" class=\"headerlink\" title=\"Access-Control-Allow-Origin\"></a>Access-Control-Allow-Origin</h4><p>响应首部中可以携带一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Allow-Origin</code></a><code>字段，其语法如下:</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure>\n<p>其中，origin 参数的值指定了允许访问该资源的外域 URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p>\n<p>例如，下面的字段值将允许来自 <a href=\"http://mozilla.com\" target=\"_blank\" rel=\"noopener\">http://mozilla.com</a> 的请求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://mozilla.com</span><br></pre></td></tr></table></figure>\n<p>如果服务端指定了具体的域名而非“*”，那么响应首部中的 Vary 字段的值必须包含 Origin。这将告诉客户端：服务器对不同的源站返回不同的内容。</p>\n<h4 id=\"Access-Control-Expose-Headers\"><a href=\"#Access-Control-Expose-Headers\" class=\"headerlink\" title=\"Access-Control-Expose-Headers\"></a>Access-Control-Expose-Headers</h4><p>译者注：在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Expose-Headers\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Expose-Headers</code></a> 头让服务器把允许浏览器访问的头放入白名单，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header</span><br></pre></td></tr></table></figure>\n<p>这样浏览器就能够通过getResponseHeader访问<code>X-My-Custom-Header</code>和 <code>X-Another-Custom-Header</code> 响应头了<code>。</code></p>\n<h4 id=\"Access-Control-Max-Age\"><a href=\"#Access-Control-Max-Age\" class=\"headerlink\" title=\"Access-Control-Max-Age\"></a>Access-Control-Max-Age</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Max-Age</code></a> 头指定了preflight请求的结果能够被缓存多久，请参考本文在前面提到的preflight例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Max-Age: &lt;delta-seconds&gt;</span><br></pre></td></tr></table></figure>\n<p><code>delta-seconds</code> 参数表示preflight请求的结果在多少秒内有效。</p>\n<h4 id=\"Access-Control-Allow-Credentials\"><a href=\"#Access-Control-Allow-Credentials\" class=\"headerlink\" title=\"Access-Control-Allow-Credentials\"></a>Access-Control-Allow-Credentials</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Allow-Credentials</code></a> 头指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。当用在对preflight预检测请求的响应中时，它指定了实际的请求是否可以使用<code>credentials</code>。请注意：简单 GET 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>\n<p>上文已经讨论了<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials\" target=\"_blank\" rel=\"noopener\">附带身份凭证的请求</a>。</p>\n<h4 id=\"Access-Control-Allow-Methods\"><a href=\"#Access-Control-Allow-Methods\" class=\"headerlink\" title=\"Access-Control-Allow-Methods\"></a>Access-Control-Allow-Methods</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Allow-Methods</code></a> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</span><br></pre></td></tr></table></figure>\n<p>相关示例见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS$edit#Preflighted_requests\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h4 id=\"Access-Control-Allow-Headers\"><a href=\"#Access-Control-Allow-Headers\" class=\"headerlink\" title=\"Access-Control-Allow-Headers\"></a>Access-Control-Allow-Headers</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Allow-Headers</code></a> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTP-请求首部字段\"><a href=\"#HTTP-请求首部字段\" class=\"headerlink\" title=\"HTTP 请求首部字段\"></a>HTTP 请求首部字段</h3><p>本节列出了可用于发起跨域请求的首部字段。请注意，这些首部字段无须手动设置。 当开发者使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p>\n<h4 id=\"Origin\"><a href=\"#Origin\" class=\"headerlink\" title=\"Origin\"></a>Origin</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin\" target=\"_blank\" rel=\"noopener\"><code>Origin</code></a> 首部字段表明预检请求或实际请求的源站。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Origin: &lt;origin&gt;</span><br></pre></td></tr></table></figure>\n<p>origin 参数的值为源站 URI。它不包含任何路径信息，只是服务器名称。</p>\n<p><strong>Note:</strong> 有时候将该字段的值设置为空字符串是有用的，例如，当源站是一个 data URL 时。</p>\n<p>注意，不管是否为跨域请求，ORIGIN 字段总是被发送。</p>\n<h4 id=\"Access-Control-Request-Method\"><a href=\"#Access-Control-Request-Method\" class=\"headerlink\" title=\"Access-Control-Request-Method\"></a>Access-Control-Request-Method</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Request-Method</code></a> 首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Request-Method: &lt;method&gt;</span><br></pre></td></tr></table></figure>\n<p>相关示例见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#Preflighted_requests\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h4 id=\"Access-Control-Request-Headers\"><a href=\"#Access-Control-Request-Headers\" class=\"headerlink\" title=\"Access-Control-Request-Headers\"></a>Access-Control-Request-Headers</h4><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers\" target=\"_blank\" rel=\"noopener\"><code>Access-Control-Request-Headers</code></a> 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure>","categories":[{"name":"http","slug":"http","count":1,"path":"api/categories/http.json"}],"tags":[{"name":"http","slug":"http","count":1,"path":"api/tags/http.json"}]}