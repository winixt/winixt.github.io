{"title":"js 异步进化史之async","slug":"js异步进化史之async","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/js异步进化史之async.json","photos":[],"link":"","excerpt":"我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async","covers":["https://ws4.sinaimg.cn/large/006tKfTcgy1fo3j1dq8qjj30ko05fmxw.jpg"],"content":"<p>我们的 js 处理的异步的方式不断进化，现在已经到了第四代，最强之 async</p>\n<a id=\"more\"></a>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1fo3j1dq8qjj30ko05fmxw.jpg\" alt=\"图片\"></p>\n<h3 id=\"什么是-async？\"><a href=\"#什么是-async？\" class=\"headerlink\" title=\"什么是 async？\"></a>什么是 async？</h3><hr>\n<p>async 定义了一个异步函数，并总是返回一个 Promise。当执行到 await 表达式，async 函数会暂停执行，等待表达式中的 Promise 决议后，async 再继续执行。</p>\n<p>上一篇 js异步进化史之Generator 代码，用同步的方式编写异步代码，要做到方便使用，需要引入额外的库，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"keyword\">yield</span> requst(<span class=\"string\">'http://example.com'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在我们用 async 改写一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"keyword\">await</span> requst(<span class=\"string\">'http://example.com'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是更逆天，不需要额外引入函数库，也没有 co 什么的，直接原生 js 支持。</p>\n<p>哎呀，爱死 js 了，爱死 ES 工作组人员了。</p>\n<h3 id=\"async-返回值\"><a href=\"#async-返回值\" class=\"headerlink\" title=\"async 返回值\"></a>async 返回值</h3><hr>\n<p>async 的定义表明，async 总是返回一个 Promise。其实就像这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用 Promise.resolve 包装返回结果，新建一个 Promise。不清楚 Promise 的可以看 <a href=\"https://winixt.me/js%E5%BC%82%E6%AD%A5%E8%BF%9B%E5%8C%96%E5%8F%B2%E4%B9%8BPromise/\" target=\"_blank\" rel=\"noopener\">js 异步进化史之Promise</a></p>\n<h3 id=\"async-并发\"><a href=\"#async-并发\" class=\"headerlink\" title=\"async 并发\"></a>async 并发</h3><hr>\n<p>直接上代码吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = requst(<span class=\"string\">'http://example.com?index=1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = requst(<span class=\"string\">'http://example.com?index=2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = requst(<span class=\"string\">'http://example.com?index=3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>哇～</p>\n<p>nice!</p>\n<p>nice!</p>\n<p>nice!</p>\n<p>最后最后的最后</p>\n<p>连更四篇博客 回调 &gt; promise &gt; generator &gt; async 真的累呀～</p>\n<p>而且还是写的冰山一角，可以想象一下 ES 工作组的人员花费了多少心血</p>\n<p>ES 工作组的成员，以及参与 ES 改进的广大社区朋友们幸苦了！！！致敬</p>\n","categories":[{"name":"异步","slug":"异步","count":4,"path":"api/categories/异步.json"}],"tags":[{"name":"async/await","slug":"async-await","count":1,"path":"api/tags/async-await.json"}]}