{"title":"webpack之优化","slug":"webpack之优化","date":"2019-02-24T04:20:08.114Z","updated":"2019-02-24T04:20:08.114Z","comments":true,"path":"api/articles/webpack之优化.json","photos":[],"link":"","excerpt":"在上篇 webpack 之基础配置讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。","covers":["https://ws4.sinaimg.cn/large/006tNc79ly1foswn2zlu3j31kw0vr7az.jpg","https://ws4.sinaimg.cn/large/006tNc79gy1fotpyawq9nj30qk08kgn7.jpg","https://ws3.sinaimg.cn/large/006tNc79gy1fotq3yoyp9j30qi06g0u8.jpg","https://ws4.sinaimg.cn/large/006tNc79gy1fotxz9d3qyj30zs19swk6.jpg"],"content":"<p>在上篇 <a href=\"https://winixt.github.io/webpack%E4%B9%8B%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">webpack 之基础配置</a>讲解了 webpack 的一些基本用法，本篇我们来详细分析下 webpack 性能相关优化。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79ly1foswn2zlu3j31kw0vr7az.jpg\" alt=\"图片\"></p>\n<p>webpack 的优化可分为两大类：</p>\n<ul>\n<li>优化开发体验：提高构建速度、热替换和自动刷新。</li>\n<li>优化输出质量：压缩、CDN 加速、使用 Tree Shaking、提取公共代码、按需加载等。</li>\n</ul>\n<h3 id=\"优化开发体验\"><a href=\"#优化开发体验\" class=\"headerlink\" title=\"优化开发体验\"></a>优化开发体验</h3><hr>\n<h4 id=\"缩小文件搜索范围\"><a href=\"#缩小文件搜索范围\" class=\"headerlink\" title=\"缩小文件搜索范围\"></a>缩小文件搜索范围</h4><p>webpack 启动后会从 entry 出发递归解析和处理 module。处理 module 的时候涉及查找 module 对应的文件和 module 解析两个步骤。当项目比较大的时候，查找和解析 module 可能会造成构建缓慢。因此我们可以从这个点出发，进行优化。</p>\n<h5 id=\"优化-Loader-配置\"><a href=\"#优化-Loader-配置\" class=\"headerlink\" title=\"优化 Loader 配置\"></a>优化 Loader 配置</h5><p>由于 loader 转换耗时，因此应尽可能减少不必要的 loader 转换，可以通过 test、include、exclude 等缩小命中范围：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader?cacheDirectory'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 只处理 src 目录下的文件</span></span><br><span class=\"line\">        include: path.resovle(__dirname, <span class=\"string\">'src'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"优化-resolve-modules-配置\"><a href=\"#优化-resolve-modules-配置\" class=\"headerlink\" title=\"优化 resolve.modules 配置\"></a>优化 resolve.modules 配置</h5><p>默认第三方模块在当前目录下的 node_modules 目录下查找，找不到再 往上 ../node_modules，再不到再往上 ../../node_modules。</p>\n<p>当我们所需要的第三方模块都在当前目录下的 node_modules 时，可以使用绝对路径。减少搜索时间：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    modules: [path.resolve(__dirname, <span class=\"string\">'node_modules'</span>)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"优化-module-noParse-配置\"><a href=\"#优化-module-noParse-配置\" class=\"headerlink\" title=\"优化 module.noParse 配置\"></a>优化 module.noParse 配置</h5><p>没有采用模块化的文件，没必要经过 webpack 的处理，例如: jQuery、ChartJS。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    noParse: [/chartjs/],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-DllPlugin\"><a href=\"#使用-DllPlugin\" class=\"headerlink\" title=\"使用 DllPlugin\"></a>使用 DllPlugin</h4><p>使用过 window 系统的人，应该经常看到 .dll 后缀的文件，这些文件成为<strong>动态链接库</strong>，在一个动态链接库中可以包含给其他模块调用的函数和数据。</p>\n<p>webpack 可以利用 DllPlugin 将常用的第三方库打包进动态链接库中，例如：react、react-dom，只要不升级这些模块，动态链接库就不用重新编译，从而大量缩短编译时间。</p>\n<h5 id=\"接入-wepack\"><a href=\"#接入-wepack\" class=\"headerlink\" title=\"接入 wepack\"></a>接入 wepack</h5><p>webpack 已经内置了对动态链接库的支持，需要通过两个内置的插件接入：</p>\n<ul>\n<li>DllPlugin： 用于打包动态链接库文件。</li>\n<li>DllReferencePlugin: 用于在主配置文件中引入 DllPlugin 打包好的动态链接库文件。</li>\n</ul>\n<p>为了方便说明，我用 webpack 简单构建了 react 和 react-dom 合成的动态链接库文件，输出目录如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dist</span><br><span class=\"line\">  |-- react.dll.js</span><br><span class=\"line\">  |-- react.manifest.json</span><br></pre></td></tr></table></figure>\n<p>react.dll.js 的内容大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _dll_react = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... 此处省略 webpackBoostrap 函数代码</span></span><br><span class=\"line\">&#125;([</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模块 ID 为 0 的模块对应的代码</span></span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 模块 ID 为 1 的模块对应的代码</span></span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  <span class=\"comment\">// ... 省略其他模块对应的代码</span></span><br><span class=\"line\">]));</span><br></pre></td></tr></table></figure>\n<p>可以一个动态链接库文件中可以包含大量模块，模块以数组索引最为 ID，并且通过 _dll_react 变量将自己暴露在全局中。</p>\n<p>react.manifest.json 也是由 DllPlugin 生成的，用于描述动态链接库中包含哪些模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 描述该动态链接库文件暴露在全局的变量名称</span></span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"_dll_react\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"content\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"./node_modules/process/browser.js\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">\"meta\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ... 此处省略部分模块</span></span><br><span class=\"line\">    <span class=\"string\">\"./node_modules/react-dom/lib/ReactBrowserEventEmitter.js\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">      <span class=\"string\">\"meta\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"./node_modules/react/lib/lowPriorityWarning.js\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">47</span>,</span><br><span class=\"line\">      <span class=\"string\">\"meta\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ... 此处省略部分模块</span></span><br><span class=\"line\">    <span class=\"string\">\"./node_modules/react-dom/lib/SyntheticTouchEvent.js\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">210</span>,</span><br><span class=\"line\">      <span class=\"string\">\"meta\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"./node_modules/react-dom/lib/SyntheticTransitionEvent.js\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"number\">211</span>,</span><br><span class=\"line\">      <span class=\"string\">\"meta\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见 manifest.json 文件清楚的描述对应的 dll 文件包含哪些模块，以及这些模块的 ID。对应的 html 为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Page Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--导入依赖的动态链接库文件--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/react.dll.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--导入执行入口文件--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"构建动态链接库\"><a href=\"#构建动态链接库\" class=\"headerlink\" title=\"构建动态链接库\"></a>构建动态链接库</h5><p>新建一个 webpack_dll.config.js 文件构建动态链接库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> DllPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack/lib/DllPlugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    react: [<span class=\"string\">'react'</span>, <span class=\"string\">'react-dom'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].dll.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 存放动态链接库全局变量的名称，对 react 来说是 _dll_react</span></span><br><span class=\"line\">    <span class=\"comment\">// 加上 _dll_ 是为了防止命名冲突</span></span><br><span class=\"line\">    library: <span class=\"string\">'_dll_[name]'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> DllPlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动态链接库的名称，需要和 library 保持一致</span></span><br><span class=\"line\">      <span class=\"comment\">// 该字段的值也就是输出的 manifest.json 文件中 name 的值</span></span><br><span class=\"line\">      name: <span class=\"string\">'_dll_[name]'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 描述动态链接库的 manifest.json 文件输出时的文件名</span></span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'dist'</span>, <span class=\"string\">'[name].manifest.json'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用动态链接库\"><a href=\"#使用动态链接库\" class=\"headerlink\" title=\"使用动态链接库\"></a>使用动态链接库</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> DllReferencePlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack/lib/DllReferencePlugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./main.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          use: [<span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">        exclude: path.resolve(__dirname, <span class=\"string\">'node_modules'</span>)</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 告诉 webpack 使用了哪些动态链接库</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> DllReferencePlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 描述 react 动态链接库的文件内容</span></span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/react.manifest.json'</span>),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name]_[contenthash:8].css'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-HappyPack\"><a href=\"#使用-HappyPack\" class=\"headerlink\" title=\"使用 HappyPack\"></a>使用 HappyPack</h4><p>webpack 以单线程模式运行在 nodejs 之上，当项目大，需要处理大量文件的时候，不能充分利用 CPU 的性能。</p>\n<p>HappyPack 可以解决这个问题，它把任务分给多个子进程去并发执行，子进程处理完后再把结果返回给主进程。</p>\n<h5 id=\"接入-HappyPack\"><a href=\"#接入-HappyPack\" class=\"headerlink\" title=\"接入 HappyPack\"></a>接入 HappyPack</h5><p>分解任务和进程管理 HappyPack 都会自动完成，你所需要做的只是接入 HappyPack：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HappyPack = <span class=\"built_in\">require</span>(<span class=\"string\">'happypack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 将 js 文件交给 id 为 babel 的 HappyPack 进程处理</span></span><br><span class=\"line\">        use: [<span class=\"string\">'happypack/loader?id=babel'</span>],</span><br><span class=\"line\">        exclude: path.resolve(__dirname, <span class=\"string\">'node_modules'</span>)</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将 css 文件交个 id 为 css 的 HappyPack 进程处理</span></span><br><span class=\"line\">          use: [<span class=\"string\">'happypack/loader?id=css'</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HappyPack(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 标识 HappyPack 进程</span></span><br><span class=\"line\">      id: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 如何处理 .js 文件，用法和 loader 配置一样</span></span><br><span class=\"line\">      loaders: [<span class=\"string\">'babel-loader?cacheDirectory'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HappyPack(&#123;</span><br><span class=\"line\">      id: <span class=\"string\">'css'</span>,</span><br><span class=\"line\">      loaders: [<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].css'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了支持 id 和 loaders，HappyPack 还支持如下参数：</p>\n<ul>\n<li>threads: 代表开几个进程去处理这一类文件，默认是 3 个，类型必须是整数。</li>\n<li>verbose: 是否允许 HappyPack 输出日志，默认 true。</li>\n<li>threadPool: 代表共享进程池，即多个 HappyPack 实例都使用同一个共享进程池中的子进程处理任务，以防止资源占用过多。</li>\n</ul>\n<p>进程池的创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const happyThreadPool = HappyPack.ThreadPool(&#123;size: 5&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-ParallelUglifyPlugin\"><a href=\"#使用-ParallelUglifyPlugin\" class=\"headerlink\" title=\"使用 ParallelUglifyPlugin\"></a>使用 ParallelUglifyPlugin</h4><p>在构建线上代码的时候，需要对代码进行压缩，会发现这个过程相比开发环境慢很多。因为压缩 js 代码需要先把代码解析成用 Object 抽象表示的 AST 语法树，再去应用各种规则分析和处理 AST，导致这个过程计算量巨大，耗时非常多。</p>\n<p>使用 parallelUglifyPlugin 可以开启多个进程进行并行压缩，加快构建过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> DefinePlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack/lib/DefindePlugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ParallelUglifyPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-parallel-uglify-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 使用 ParallelUglifyPlugin 并行压缩 js 代码</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ParalleUglifyPlugin(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 传递给 UglifyJS 的参数</span></span><br><span class=\"line\">      uglifyJS: &#123;</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 最紧凑输出</span></span><br><span class=\"line\">          beautify: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 删除所有注释</span></span><br><span class=\"line\">          comments: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 在 UglifyJS 删除没有用到的代码时不输出警告</span></span><br><span class=\"line\">          warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 删除所有的 console 语句，兼容 ie</span></span><br><span class=\"line\">          drop_console: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 内嵌定义了但只用到一次的变量</span></span><br><span class=\"line\">          collapse_vars: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class=\"line\">          reduce_vars: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ParallelUglifyPlugin 支持以下参数：</p>\n<ul>\n<li>test：使用正则去匹配需要压缩哪些文件，默认是 /\\.js$/。</li>\n<li>include: 使用正则去命中需要被压缩的文件，默认 []。</li>\n<li>exclude: 使用正则去命中不需要被压缩的文件，默认 []。</li>\n<li>cacheDir: 缓存压缩后的结果，默认不缓存，若需要缓存请设置一个目录路径。</li>\n<li>workerCount: 开启几个进程去执行压缩，默认当前 CPU 核数减一。</li>\n<li>sourceMap: 是否输出 Source Map，这会导致压缩过程变慢。</li>\n<li>uglifyJS：用于压缩 es5 代码时的配置，Object 类型，直接传递给 UglifyJS 的参数。</li>\n<li>uglifyES：用于压缩 es6 代码时的配置，Object 类型，直接传递给 UglifyES 的参数。</li>\n</ul>\n<p>其中 test、include、exclude 与配置 loader 时的思想和用法一样。</p>\n<blockquote>\n<p>UglifyES 是 UglifyJS 的变种，专门用于压缩 es6 代码，它们两都出自于同一项目，但不能同时使用。</p>\n<p>UglifyES 一般用于给比较新的 js 运行环境压缩代码，例如 react-native，为了能得到更好的性能和尺寸，采用 UglifyES 压缩效果更好。</p>\n<p>ParallelUglifyPlugin 同时内置了 UglifyES 和 UglishJS。</p>\n</blockquote>\n<blockquote>\n<p>注意：webpack4.0 UglifyJS 在 production 模式时，UglifyJS 自动并行编译和缓存，</p>\n<p>这意味着 当你使用 &gt;= webpack4.0 的版本时不在需要使用 ParallelUglifyPlugin，</p>\n<p>官方说明到 webpack5.0 的时候将会完全实现缓存和并行化，期待</p>\n</blockquote>\n<h4 id=\"自动刷新\"><a href=\"#自动刷新\" class=\"headerlink\" title=\"自动刷新\"></a>自动刷新</h4><p>为了优化开发体验，webpack 内置了监听文件的变化去刷新浏览器的功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只有开启监听模式，watchOptions 才有意义</span></span><br><span class=\"line\">  <span class=\"comment\">// 默认为 false</span></span><br><span class=\"line\">  watch: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  watchOptions: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不监听文件或文件夹，默认为 ''</span></span><br><span class=\"line\">    ignored: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 监听到文件变化后，等 300ms 再去执行操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 防止文件更新太快，重编译频率太高</span></span><br><span class=\"line\">    aggregateTimeout: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 不停的去询问系统文件是否发生变化</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认每秒问 1000 次</span></span><br><span class=\"line\">    poll: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文件监听实现的原理为，记录最后一次文件的编译时间与文件的最后一次保存时间对比，若不相同，在等待 aggregateTimeout 后对文件进行重新编译。</p>\n<p>webpack 官方提供了两大模块，一个是核心 webpack 一个是 webpack-dev-server</p>\n<p>如果要开启自动刷新功能，需要用 webpack-dev-server 启动 webpack 构建，而 webpack-dev-server 默认开启 watch。</p>\n<h4 id=\"开启模块热替换\"><a href=\"#开启模块热替换\" class=\"headerlink\" title=\"开启模块热替换\"></a>开启模块热替换</h4><p>模块热替换可在不刷新整个网页的情况下做到超灵敏的实时预览。原理是当一个模块发生变化时，只重新编译发生变化的模块，再用新模块替换浏览器中老的模块。</p>\n<p>在启动 webpack 构建时 带上 —hot 参数即可启动模块热替换</p>\n<h5 id=\"优化模块热启动\"><a href=\"#优化模块热启动\" class=\"headerlink\" title=\"优化模块热启动\"></a>优化模块热启动</h5><p>在发生模块热替换时，浏览器的日志显示的是替换模块的 ID，对人类很不友好。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fotpyawq9nj30qk08kgn7.jpg\" alt=\"图片\"></p>\n<p>从上图可以看到，模块热替换默认显示的是模块 ID 1。上图也有提示：</p>\n<p>Consider using the Name ModulesPlugin for module names</p>\n<p>我们来优化一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> NamedModulesPlugin = requjre(<span class=\"string\">'webpack/lib/NamedModulesPlugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> NamedModulesPlugin(),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79gy1fotq3yoyp9j30qi06g0u8.jpg\" alt=\"图片\"></p>\n<p>可以看到模块 ID 就变成模块名称了。</p>\n<blockquote>\n<p>注意：webpack4 在 开发模式下，默认启用了 NamedModulesPlugin，不需要再手动设置</p>\n</blockquote>\n<h3 id=\"优化输出质量\"><a href=\"#优化输出质量\" class=\"headerlink\" title=\"优化输出质量\"></a>优化输出质量</h3><hr>\n<h4 id=\"区分环境\"><a href=\"#区分环境\" class=\"headerlink\" title=\"区分环境\"></a>区分环境</h4><p>开发网页的时候，一般会有多套运行代码，例如：</p>\n<ul>\n<li>开发环境代码，包含日志输出，代码美化方便调试</li>\n<li>发布线上代码，移除日志输出，代码压缩，提高代码运行效率</li>\n</ul>\n<p>很多第三方库的代码也做了环境区分，例如：react:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODe_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  waring(...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时可以通过 webpack 设置打包环境，优化代码输出质量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DefinePlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack/lib/DefinePlugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过构建后代码变成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  waring(...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if 语句得不到执行，再经过 UglifyJS 压缩，即可删除这段无效代码，即可以提高代码运行速度，又可以减小总体代码体积。</p>\n<h4 id=\"压缩代码\"><a href=\"#压缩代码\" class=\"headerlink\" title=\"压缩代码\"></a>压缩代码</h4><h5 id=\"为什么要进行代码压缩\"><a href=\"#为什么要进行代码压缩\" class=\"headerlink\" title=\"为什么要进行代码压缩\"></a>为什么要进行代码压缩</h5><p>因为进行代码压缩可以减小文件体积，减少网络传输流量。对于代码文件还有混淆代码的作用，并且压缩了代码变量名名称，有利于保护代码安全。</p>\n<p>压缩 js 上文有介绍，这里就不赘述，我们来看看 css 压缩、svg 压缩。</p>\n<h5 id=\"css-压缩\"><a href=\"#css-压缩\" class=\"headerlink\" title=\"css 压缩\"></a>css 压缩</h5><p>css 代码也可以像 js 那样压缩，对代码进行混淆，目前比较成熟的工具是 cssnano，基于 PostCSS。</p>\n<p>cssnano 能理解 css 代码含义，而不仅仅是删除空格，例如：</p>\n<ul>\n<li>margin: 10px 20px 10px 20px 被压缩成 margin: 10px 20px;</li>\n<li>color: #ff0000 被压缩成 color: red;</li>\n</ul>\n<p>webpack 使用 cssnano 很简单，只需要开启 css-loader 的 minimize 选项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'css-loader?minimize'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"svg-压缩\"><a href=\"#svg-压缩\" class=\"headerlink\" title=\"svg 压缩\"></a>svg 压缩</h5><p>目前 svg 已经成为客户端应用小图标的首先技术方案，相对于位图更清晰，多数情况下体积更小。</p>\n<p>使用 sag-inline-loader 会分析 svg 内容，去除不必要的内容，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg class=&quot;icon&quot; verison=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot;</span><br><span class=\"line\">     stroke=&quot;#000&quot;&gt;</span><br><span class=\"line\">  &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot;/&gt;</span><br><span class=\"line\">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n<p>被处理后：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg viewBox=&quot;0 0 24 24&quot; stroke=&quot;#000&quot;&gt;&lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot;/&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n<p>sag-inline-loader 用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.svg/,</span><br><span class=\"line\">        use: [&apos;use-inline-loader&apos;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-Tree-Shaking\"><a href=\"#使用-Tree-Shaking\" class=\"headerlink\" title=\"使用 Tree Shaking\"></a>使用 Tree Shaking</h4><h5 id=\"什么是-Tree-Shaking\"><a href=\"#什么是-Tree-Shaking\" class=\"headerlink\" title=\"什么是 Tree Shaking\"></a>什么是 Tree Shaking</h5><p>Tree Shaking 可以用来剔除 javascript 中用不上的死代码，依赖于 es6 模块化语法。</p>\n<p>例如：utils.js源码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcOne</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcTwo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们的代码只引用了 funcOne:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;funcTwo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do something ...</span></span><br></pre></td></tr></table></figure>\n<p>Tree Shaking 后的 utils.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcOne</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：Tree Shaking 正常工作的前提是交给 webpack 的 js 代码必须是 es6 模块语法的，因为 es6 模块语法是静态的，这让 webpack 可以简单分析出哪些 export 的被 import 过了。如果采用 es5 中的模块，例如：module.exports = {…}, require(…)，webpack 无法分析出哪些代码可以被剔除。</p>\n</blockquote>\n<h5 id=\"接入-Tree-Shaking\"><a href=\"#接入-Tree-Shaking\" class=\"headerlink\" title=\"接入 Tree Shaking\"></a>接入 Tree Shaking</h5><p>把 es6 模块化的代码交给 webpack，修改 .babelrc 如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"env\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"modules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 “modules”: false 含义是关闭 babel 模块转换功能，保留原本 es6 模块化语法。</p>\n<p>配置好后，重新运行 webpack 带上 —display-used-exports 参数，方便追踪 Tree Shaking 工作。</p>\n<p>上述工作只是标识出可以剔除的代码，真正剔除的工作还得交给 UglifyJS，启动 webpack 时带上 —optimize-minimize 参数即可实现剔除。</p>\n<p>很多第三方库也提供了 es6 模块化的入口：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"main\": \"lib/index.js\", // 指明采用 CommanJS 模块化的代码入口</span><br><span class=\"line\">  \"jsnext:main: \"es/index.js\", // 指明采用 es6 模块化的代码入口</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>webpack 添加如下配置，也可让 Tree Shaking 对第三方库生效：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    mainFields: [<span class=\"string\">'jsnext:main'</span>, <span class=\"string\">'browser'</span>, <span class=\"string\">'main'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"提取公共代码\"><a href=\"#提取公共代码\" class=\"headerlink\" title=\"提取公共代码\"></a>提取公共代码</h4><h5 id=\"为什么要提取公共代码\"><a href=\"#为什么要提取公共代码\" class=\"headerlink\" title=\"为什么要提取公共代码\"></a>为什么要提取公共代码</h5><p>提供公共代码有两个方面的优势：</p>\n<ul>\n<li>提取多个页面的公共代码，虽然用户第一次访问没有优势，当时当用户访问其他页面的时候，因为本地有缓存，页面加载速度将大大加快。</li>\n<li>提取第三方库，因为第三方库代码更改频率低，可以充分利用浏览器缓存。</li>\n</ul>\n<p>使用 &gt;= webpack4.x 的版本时，webpack 会自动处理代码分割，无需手动处理。但是如果我们开发大型项目，还是有必要手动处理公共代码的。</p>\n<blockquote>\n<p>注意， webpack4.0 已经将 CommonsChunkPlugin 移除，取而代之的是更好的默认公共代码提取方式，以及拥有更丰富更灵活的功能的  optimization.splitChunks 和 optimization.runtimeChunk。</p>\n</blockquote>\n<h5 id=\"提取大型项目公共代码的原则\"><a href=\"#提取大型项目公共代码的原则\" class=\"headerlink\" title=\"提取大型项目公共代码的原则\"></a>提取大型项目公共代码的原则</h5><ul>\n<li>根据项目应用的技术栈，提取所有页面都需要的基础库。例如 react 的技术栈，可以提取 react、react-dom 为一个单独的文件。（具体情况需要具体分析，可能技术栈中使用了 appolo-client 也需要把 appolo-client 放入基础库）这个文件一般命名为 base_[hash:8].js。</li>\n<li>在剔除了公共代码库后，将各个页面公用的代码提取入 common_[hash:8].js，若是 css 可提取进 common_[hash:8].css。</li>\n<li>每个页面生成一份单独的 js、css 文件。（在此基础上按需实现懒加载）</li>\n</ul>\n<p>借用 <a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">吴浩麟大神</a>的图片</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fotxz9d3qyj30zs19swk6.jpg\" alt=\"图片\"></p>\n<p>下面我们来看看如何用 optimization.splitChunks 和 optimization.runtimeChunk 实现上叙需求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'async'</span>, <span class=\"comment\">// chunks 类型 (initial | all | async)</span></span><br><span class=\"line\">      minSize: <span class=\"number\">30000</span>, <span class=\"comment\">// 最小尺寸, 默认 30000</span></span><br><span class=\"line\">      minChunks: <span class=\"number\">1</span>, <span class=\"comment\">// 最少 chunk, 默认 1</span></span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">5</span>, <span class=\"comment\">// 最大异步请求 chunk 数</span></span><br><span class=\"line\">      maxInitalRequests: <span class=\"number\">3</span>, <span class=\"comment\">// 最大初始化请求 chunk 数</span></span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 提取各个页面的公共代码（不包括第三方库）</span></span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'commons'</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 提取各个页面公共的第三方库</span></span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'base'</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'initial'</span>,</span><br><span class=\"line\">          test: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"按需加载\"><a href=\"#按需加载\" class=\"headerlink\" title=\"按需加载\"></a>按需加载</h4><p>随着 SPA 的广泛流行，面临着一个网页需要加载全网站代码的问题，这会导致初次进入页面，页面加载缓慢、交互卡顿，用户体验糟糕。</p>\n<p>针对这个问题的优化原则：</p>\n<ul>\n<li>把整个网站拆分成一个个小功能，在按照功能的相关性分成几个类</li>\n<li>把每一个类合并为一个 chunk，按需加在对应的 chunk</li>\n<li>对于用户首次打开网页时需要用到的功能，不需要做按需加载，而是放到执行入口所在的 chunk 中，降低用户感知时间。</li>\n<li>对于依赖大量代码的功能，例如：chartjs，可对此再按需加载。（若是在首页，则可对这部分代码进行异步加载）</li>\n</ul>\n<h5 id=\"webpack-实现按需加载\"><a href=\"#webpack-实现按需加载\" class=\"headerlink\" title=\"webpack 实现按需加载\"></a>webpack 实现按需加载</h5><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; PureComponent, createElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HashRouter, Route, Link &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./Home'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsyncComponent</span>(<span class=\"params\">load</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在高阶组件 DidMount 后在去异步加载 组件</span></span><br><span class=\"line\">      load().then(<span class=\"function\">(<span class=\"params\">&#123; <span class=\"keyword\">default</span>: component &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 组件加载成功，通知高阶组件重新渲染子组件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">          component,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; component &#125; = <span class=\"keyword\">this</span>.state || &#123;&#125;;</span><br><span class=\"line\">      <span class=\"comment\">// component 是 React.Component 类型</span></span><br><span class=\"line\">      <span class=\"comment\">// 需要通过 createElement 产生一个组件实例</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> component ? createElement(component) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;HashRouter&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;nav&gt;</span><br><span class=\"line\">          &lt;Link to=<span class=\"string\">\"/\"</span>&gt;Home&lt;<span class=\"regexp\">/Link&gt; | &lt;Link to=\"/</span>about<span class=\"string\">\"&gt;Home&lt;/Link&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/nav&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;hr /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route exact path=\"</span>/<span class=\"string\">\" component=&#123;Home&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>/about<span class=\"string\">\" component=&#123;getAsyncComponent(</span></span><br><span class=\"line\"><span class=\"string\">            // webpack 内置了对 import 的支持</span></span><br><span class=\"line\"><span class=\"string\">          () =&gt; import(/* webpackChunkName: 'about' */'./pages/about')</span></span><br><span class=\"line\"><span class=\"string\">        )&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;Route path=\"</span>login<span class=\"string\">\" component=&#123;getAsyncComponent(</span></span><br><span class=\"line\"><span class=\"string\">          () =&gt; import(/* webpackChunkName: 'login' */'./pages/login')</span></span><br><span class=\"line\"><span class=\"string\">        )&#125; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/HashRouter&gt;</span></span><br><span class=\"line\"><span class=\"string\">  );</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">render(App, document.getElementById('app'))</span></span><br></pre></td></tr></table></figure>\n<p>上叙代码的关键在于 import(/<em> webpackChunkName: ‘about’ </em>/‘./pages/about’)</p>\n<p>webpack 内置了对 import(*) 语句的支持，当webpack 遇到这样的语句：</p>\n<ul>\n<li>以 ./pages/about 为入口新生成一个 Chunk;</li>\n<li>当代码执行到 import 所在语句时才会去加载由 Chunk 对应生成的文件；</li>\n<li><p>import 返回一个 promise，文件加载成功时调用 resolve</p>\n<p>注意：不支持 Promise 的浏览器需要手动注入 promise polyfill</p>\n<p>上述代码直接打包会报错，因为 Babel 不认识 import(*) ，为此我们需要安装一次插件 babel-plugin-syntax-dynamic-import，.babelrc 改为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"env\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"syntax-dynamic-import\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><hr>\n<p>深入浅出 webpack： <a href=\"http://webpack.wuhaolin.cn/\" target=\"_blank\" rel=\"noopener\">http://webpack.wuhaolin.cn/</a></p>\n<p>webpack 中文官网： <a href=\"https://doc.webpack-china.org/configuration/\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/configuration/</a></p>\n","categories":[{"name":"webpack","slug":"webpack","count":3,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack","slug":"webpack","count":3,"path":"api/tags/webpack.json"},{"name":"优化","slug":"优化","count":1,"path":"api/tags/优化.json"}]}