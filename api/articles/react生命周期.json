{"title":"react生命周期","slug":"react生命周期","date":"2019-02-24T04:20:08.113Z","updated":"2019-02-24T04:20:08.113Z","comments":true,"path":"api/articles/react生命周期.json","photos":[],"link":"","excerpt":"生命周期方法管理是 react 核心功能之一，作为一名 react 开发者没有清晰认知岂不是有点说不过去了哈哈，我们通过网上某位大佬的图片说明一下","covers":["https://ws1.sinaimg.cn/large/006tNc79gy1fo4pu0d81yj30kk0p0dhq.jpg"],"content":"<p>生命周期方法管理是 react 核心功能之一，作为一名 react 开发者没有清晰认知岂不是有点说不过去了哈哈，我们通过网上某位大佬的图片说明一下</p>\n<a id=\"more\"></a>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1fo4pu0d81yj30kk0p0dhq.jpg\" alt=\"图片\"></p>\n<p>如上图所示，react 组件生命周期分为三个阶段：</p>\n<ul>\n<li>创建期</li>\n<li>存活期</li>\n<li>销毁期</li>\n</ul>\n<p>下面我们逐个分析一下</p>\n<h3 id=\"创建期\"><a href=\"#创建期\" class=\"headerlink\" title=\"创建期\"></a>创建期</h3><hr>\n<p>即 ES6 class 的初始化过程，初始化并渲染整个组件。下面逐步分析下创建期涉及的生命周期方法。</p>\n<h4 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h4><p>用于设置默认的 props 值，如果父组件有直接传值过来或者传入 undefined，会将其覆盖。</p>\n<p>组件创建时期调用一次，因为这个方法在实例化之前调用，所以在这个方法里面还不能依赖 this。不过这是 es5 写法，太过时了，我们直接来看看 es6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">  txt: <span class=\"string\">'hello world'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h4><p>用于初始化 this.state 的值。</p>\n<p>在组件创建的时候调用一次，这个也是 es5 写法，就不多做介绍了，直接上 es6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestState</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">active</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><p>用于在组件装载前调用一次，在这个方法里面调用 this.setState 不会导致重渲。</p>\n<p>componentWillMount 方法是服务端渲染唯一调用的生命周期钩子，所以有做同构的页面要注意不要在这个方法里面使用有关浏览器的方法，比如 window，document 等。也不要在这个方法发起 http 请求。</p>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h4><p>没什么好说的，渲染对象。</p>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h4><p>在组件挂载后立即执行，此时可以操作 DOM，ajax 请求也主要在这个钩子函数发起。使用 setState 会导致重渲。</p>\n<h3 id=\"生存期\"><a href=\"#生存期\" class=\"headerlink\" title=\"生存期\"></a>生存期</h3><hr>\n<p>进入存活期后，可能服务端数据下载下来了，发生组件更新；或者在页面交互过程中更更新组件，涉及的生命周期方法如下：</p>\n<h4 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h4><p>若父组件传递的 props “发生变化”，会调用此函数。主要用于更新 this.state。</p>\n<p>“发生变化”之所以加上双引号是因为无论父组件传递的 props 是否发生改变，只要父组件进行了 render，就会出发子组件的 componentWillReceiveProps。</p>\n<h4 id=\"shouldComponetUpdate\"><a href=\"#shouldComponetUpdate\" class=\"headerlink\" title=\"shouldComponetUpdate\"></a>shouldComponetUpdate</h4><p>当收到新的 props 或 state 时，会调用此函数，用于告诉 react 是否需要重新 render。因此可以基于此进行一些 react 性能优化。默认都返回 true。</p>\n<ul>\n<li>初始化渲染</li>\n<li>使用 forceUpdate </li>\n</ul>\n<p>以上两种情况都不会调用 shouldComponentUpdate。</p>\n<h4 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h4><p>在 shouldComponentUpdate 之后，render 之前会调用次函数。此时的 state 已经是更新后的 state。不能在此函数上调用 this.setState 容易造成死循环。</p>\n<h4 id=\"render-1\"><a href=\"#render-1\" class=\"headerlink\" title=\"render\"></a>render</h4><p>组件渲染</p>\n<h4 id=\"componentDidUpate\"><a href=\"#componentDidUpate\" class=\"headerlink\" title=\"componentDidUpate\"></a>componentDidUpate</h4><p>在组件更新后马上调用，可以进行一些 DDM 操作。</p>\n<p>注意，也不能在此方法上使用 this.setState，避免造成死循环。</p>\n<h3 id=\"销毁期\"><a href=\"#销毁期\" class=\"headerlink\" title=\"销毁期\"></a>销毁期</h3><hr>\n<h4 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h4><p>在组件销毁前调用，主要用来做一些清理工作。例如：</p>\n<ul>\n<li>取消定时器</li>\n<li>解绑 DOM 事件</li>\n</ul>\n<h3 id=\"react16-新增\"><a href=\"#react16-新增\" class=\"headerlink\" title=\"react16 新增\"></a>react16 新增</h3><hr>\n<h4 id=\"componentDidCatch\"><a href=\"#componentDidCatch\" class=\"headerlink\" title=\"componentDidCatch\"></a>componentDidCatch</h4><p>在子组件发生未捕获错误时触发。作用：</p>\n<ul>\n<li>向服务器发送错误报告</li>\n<li>返回新组件代替错误组件</li>\n</ul>\n","categories":[{"name":"react","slug":"react","count":4,"path":"api/categories/react.json"}],"tags":[{"name":"react","slug":"react","count":3,"path":"api/tags/react.json"}]}