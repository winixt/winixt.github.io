{"title":"实现一个share state hook","slug":"实现一个share state hook","date":"2019-02-27T16:00:00.000Z","updated":"2019-03-09T07:03:33.050Z","comments":true,"path":"api/articles/实现一个share state hook.json","photos":[],"link":"","excerpt":"现状react hooks 目前主要作用在于通过 useState 等函数实现状态逻辑共享，而不是状态状态共享。state 共享依旧需要 redux 等库去实现。redux 对于大型应用确实是一个不错的选择。但是写 action、reducers 难受呀？同意的请往下看，不同意的请摁 ⌘ + w。","covers":null,"content":"<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>react hooks 目前主要作用在于通过 useState 等函数实现<strong>状态逻辑</strong>共享，而不是状态状态共享。state 共享依旧需要 redux 等库去实现。redux 对于大型应用确实是一个不错的选择。但是写 action、reducers 难受呀？同意的请往下看，不同意的请摁 ⌘ + w。</p>\n<a id=\"more\"></a>\n<h3 id=\"action-reducers-的重新思考\"><a href=\"#action-reducers-的重新思考\" class=\"headerlink\" title=\"action | reducers 的重新思考\"></a>action | reducers 的重新思考</h3><p>那么花费那么大功夫写 action、reducers 的目的是什么呢？它能带来那些好处呢？我认为有如下几点。</p>\n<ol>\n<li>复用数据更改逻辑</li>\n<li>使数据透明化，便于追踪 bug，\b以及后期维护</li>\n<li>方便做独立测试</li>\n<li>可以扩展去表达复杂的更新逻辑</li>\n</ol>\n<p>看起来很不错，那如果要达到这些目的，是不是没有其他更优雅的方案了呢？</p>\n<h2 id=\"一种更优雅的实现-state-共享的方式\"><a href=\"#一种更优雅的实现-state-共享的方式\" class=\"headerlink\" title=\"一种更优雅的实现 state 共享的方式\"></a>一种更优雅的实现 state 共享的方式</h2><p>受到 react hooks、rematch 和 <a href=\"https://github.com/CharlesStover/reactn#readme\" target=\"_blank\" rel=\"noopener\">reactN</a> 的启发。我实现一种 hooks 函数，该函数可以实现 state 的共享。</p>\n<h3 id=\"创建一个同步-state-hook\"><a href=\"#创建一个同步-state-hook\" class=\"headerlink\" title=\"创建一个同步 state hook\"></a>创建一个同步 state hook</h3><p>可以通过传入一个包含 <code>state</code> <code>reducers</code> <code>effects</code>(可选) 三个属性的对象，生成一个可以在多个组件间共享 <code>state</code> 的 hook。<a href=\"https://github.com/winixt/restate\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useCount.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> createShareStateHook <span class=\"keyword\">from</span> <span class=\"string\">'./createShareStateHook'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要在多个组件间贡献的 state</span></span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'罗宾'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// reducers 同步数据变更</span></span><br><span class=\"line\">    reducers: &#123;</span><br><span class=\"line\">        increment: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">count</span>: state.count + payload&#125;),</span><br><span class=\"line\">        decrement: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">count</span>: state.count - payload&#125;),</span><br><span class=\"line\">        changeName: <span class=\"function\">(<span class=\"params\">state, payload</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">name</span>: payload&#125;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 异步数据变更</span></span><br><span class=\"line\">    effects: &#123;</span><br><span class=\"line\">        getDataAsync() &#123;</span><br><span class=\"line\">             fetch(<span class=\"string\">'/get'</span>).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">             &#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">this</span>.changeName(data.name);</span><br><span class=\"line\">             &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">                 reject(err);</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建同步 state 的 hooks</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createShareStateHook(count)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用同步-state-hook\"><a href=\"#使用同步-state-hook\" class=\"headerlink\" title=\"使用同步 state hook\"></a>使用同步 state hook</h3><p>直接调用上一步生成 hook 的函数。<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useCounter <span class=\"keyword\">from</span> <span class=\"string\">'./useCounter'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Controls = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, dispatch, effects] = useCounter();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;div&gt;当前 count: &#123;data.count&#125; &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch.increment(1)&#125;&gt;加一&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch.decrement(<span class=\"number\">1</span>)&#125;&gt;减一&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; effects.getDataAsync()&#125;&gt;获取异步数据&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Message = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  const [data] = useCounter();</span></span><br><span class=\"line\"><span class=\"regexp\">  const &#123;count, name&#125; = data;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;count: &#123;count&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div&gt;name: &#123;name&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"react","slug":"react","count":5,"path":"api/categories/react.json"}],"tags":[{"name":"hooks","slug":"hooks","count":1,"path":"api/tags/hooks.json"}]}